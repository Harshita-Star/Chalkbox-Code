package schooldata;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpSession;

import org.primefaces.model.file.UploadedFile;

import Json.DataBaseMeathodJson;
import exam_module.ExamInfo;
import student_module.DataBaseOnlineAdm;

@ManagedBean(name="masterRegistrationBean")
@ViewScoped

public class MasterRegistrationBean implements Serializable
{
	String residencePhone,studentPhone="0",fathersOccupation,selectedSection,country,route,className,fname,lname,ffname,mname,className1,routeName1="",
			category=" ",gender, nationality, religion=" ",currAdd=" ", perAdd=" ",addmissionNumber,sendMessageMobileNo,admRemark=" ";
	String doctype;
	String newHouse;
	String discountFee="0";
	String TotalFess="0";
	ArrayList<ClassTest> classTestList;
	ArrayList<ExamInfo>examList;
	boolean testStatus=false,examStatus=false,showInstitute=false;
	ArrayList<SelectItem> categoryList,discountList,sectionList,religionList,handicaplist;
	List<SelectItem> classList,routeList,connsessionList;
	long fathersPhone,mothersPhone;
	int pincode=0;
	double hostelfees;
	UploadedFile studentImage;
	Date addmissionDate=new Date(), dob=new Date();
	String fatherAadharNo,boardName,hostal,houseName,disability,handicap;
	String bpl,bplCardNo,concession,caste,singleChild,bloodGroup,aadharNo,SingleParent,livingWith,fatherEmail,motherEmail;
	UploadedFile fatherImage,motherImage,g1Image,g2Image;
	boolean showBpl,showDis;
	String message="";
	ArrayList<SelectItem>houseCategorylist,doctypelist,branchList;
	String fname1,lname1,relation1,occupation1,phone1,address1,fname2,lname2,relation2,occupation2,phone2,address2,lastSchoolName,passedClass,medium,sname1,sname2,sclassid1,sclassid2,sClassName1,sClassName2;
	ArrayList<String> documentsSubmitted;
	boolean completed;
	String routeFees="0";
	ArrayList<StudentInfo> studentList;
	String pResult,p_percent,pReason,height,weight,eyes,fatherQualification,motherQualification,motherOccupation,fatherDesignation;
	String motherDesignation,fatherOrganization,motherOrganization,fatherOfficeAdd,motherOfficeAdd,fatherIncome,motherIncome,FatherAadhaar,motherAadhaar,fatherSchoolEmp,motherSchoolEmp;
	Date tcDate;
	String motherofficecontactno,fatherofficecontcatno;
	String rollno,studentstatus="new";
	String conceesionCategory,concessionStatus;

	String srnoType,srnoPrefix,srnoStart,schid,session;
	boolean disableSrNo; //with getter - setter
	SchoolInfoList info;
	DatabaseMethods1 DBM=new DatabaseMethods1();

	public MasterRegistrationBean()
	{

		Connection conn=DataBaseConnection.javaConnection();
		
		HttpSession ss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		branchList = (ArrayList<SelectItem>) ss.getAttribute("branchList");
		
		schid=DBM.schoolId();
		session=DBM.selectedSessionDetails(schid, conn);
		try {
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void branchWiseWork()
	{
		sectionList=new ArrayList<>();
		selectedSection="";
		className1="";
		Connection conn=DataBaseConnection.javaConnection();
		DatabaseMethods1 DBM=new DatabaseMethods1();
		HttpSession ss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		message=(String) ss.getAttribute("registration");
		categoryList=DBM.studentCategoryList(conn);
		classList = DBM.allClass(schid,conn);
		religionList=DBM.allReligionList(conn);
		routeList = DBM.allStops(schid,conn);
		houseCategorylist=DBM.allHouseCategory(schid,conn);
		doctypelist=DBM.allDocType(schid,conn);
		connsessionList=DBM.allConnsessionType(schid,conn);
		nationality="Indian";
		handicaplist=DBM.studentHandicapList(conn);
		concession=(String) connsessionList.get(0).getValue();
		String ctype=DBM.checkClientType(schid,conn);
		if(ctype.equalsIgnoreCase("institute"))
		{
			showInstitute=true;
		}
		else
		{
			showInstitute=false;
		}
		//religion="Hindu";

		country="India";

		info = DBM.fullSchoolInfo(schid,conn);
		srnoType = info.getSrnoType();

		if(srnoType.equalsIgnoreCase("manual"))
		{
			disableSrNo = false;
			addmissionNumber = "";
		}
		else
		{
			disableSrNo = true;
			boolean check = DBM.checkStudentsInSchool(info.getSchid(),conn);
			if(check==false)
			{
				addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
			}
			else
			{
				addmissionNumber = info.getSrnoPrefix()+DBM.autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
			}
			//
		}
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public void checkRoute()
	{
		Connection conn=DataBaseConnection.javaConnection();
		routeFees=new DatabaseMethods1().routeStopListAllAmount(schid,routeName1,conn);
		TotalFess=routeFees;
		discountFee="0";
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public void checkfees()
	{
		if(Integer.valueOf(routeFees)>=Integer.valueOf(discountFee))
		{
			TotalFess=String.valueOf(Integer.valueOf(routeFees)-Integer.valueOf(discountFee));

		}
		else
		{
			TotalFess=routeFees;
			discountFee="0";
			FacesContext fc=FacesContext.getCurrentInstance();
			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Discount Fee Must Be LessThan Or Equal Of Route Fees","Discount Fee Must Be LessThan Or Equal Of Route Fees"));

		}

	}

	public void checkAdmissionNumber()
	{
		Connection conn=DataBaseConnection.javaConnection();
		int status=new DatabaseMethods1().duplicateStudentEntry(schid,addmissionNumber,conn);
		if(status==1)
		{

			FacesContext fc=FacesContext.getCurrentInstance();
			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Duplicate Admission Number "+addmissionNumber+" found,try a different one","Duplicate Admission Number "+addmissionNumber+" found,try a different one"));
			addmissionNumber="";
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void allSections()
	{
		Connection conn=DataBaseConnection.javaConnection();
		sectionList=new DatabaseMethods1().allSection(schid,className1,conn);
		selectedSection=(String) sectionList.get(0).getValue();

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void showBPLNo()
	{
		if(bpl.equals("Yes"))
			showBpl=true;
		else
			showBpl=false;
	}
	public void showDisability()
	{
		if(disability.equals("Yes"))
			showDis=true;
		else
			showDis=false;
	}

	public ArrayList<String> autoCompleteStudentInfo(String query)
	{
		Connection conn=DataBaseConnection.javaConnection();
		studentList=new DatabaseMethods1().searchStudentList(schid,query,conn);
		ArrayList<String> studentListt=new ArrayList<>();

		for(StudentInfo info : studentList)
		{
			studentListt.add(info.getFname()+"-"+info.getAddNumber());
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return studentListt;
	}

	public void checkSiblingClass1()
	{
		int index=sname1.lastIndexOf("-")+1;
		String id=sname1.substring(index);
		if(index!=0)
		{
			for(StudentInfo info : studentList)
			{
				if(String.valueOf(info.getAddNumber()).equals(id))
				{
					sclassid1=info.getSectionid();
					sClassName1=info.getClassId();
				}
			}
		}
	}

	public void addHouse()
	{
		Connection conn=DataBaseConnection.javaConnection();
		DatabaseMethods1 obj=new DatabaseMethods1();

		int j=obj.checkHouseCategory(schid,newHouse,conn);
		if(j>0)
		{
			FacesContext fc=FacesContext.getCurrentInstance();
			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"duplicate House Category Found ","duplicate House Category Found"));

		}
		else
		{
			int i=obj.addhouse(schid,newHouse,conn);
			if(i>0)
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"House Category Added","House Category Added"));
				houseCategorylist=obj.allHouseCategory(schid,conn);

				newHouse="";
			}
			else
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Some Error Occur Please try Again","Some Error Occur Please try Again"));

			}
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void addDocType()
	{
		Connection conn=DataBaseConnection.javaConnection();
		DatabaseMethods1 obj=new DatabaseMethods1();

		int j=obj.checkDoctype(schid,doctype,conn);
		if(j>0)
		{
			FacesContext fc=FacesContext.getCurrentInstance();
			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"duplicate Document  Found ","duplicate Document  Found"));

		}
		else
		{
			int i=obj.addDoctype(schid,doctype,conn);
			if(i>0)
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Document Added","Document Added"));
				doctypelist=obj.allDocType(schid,conn);

				doctype="";
			}
			else
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Some Error Occur Please try Again","Some Error Occur Please try Again"));

			}
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}



	public void checkSiblingClass2()
	{
		int index=sname2.lastIndexOf("-")+1;
		String id=sname2.substring(index);
		if(index!=0)
		{
			for(StudentInfo info : studentList)
			{
				if(String.valueOf(info.getAddNumber()).equals(id))
				{
					sclassid2=info.getSectionid();
					sClassName2=info.getClassId();
				}
			}
		}
	}

	public String reg2()
	{
		DatabaseMethods1 DBM = new DatabaseMethods1();

		Connection conn=DataBaseConnection.javaConnection();
		SchoolInfoList info=DBM.fullSchoolInfo(schid,conn);
		/*int status=new DatabaseMethods1().duplicateStudentEntry(addmissionNumber,conn);
				if(status==1)
				{

					FacesContext fc=FacesContext.getCurrentInstance();
					fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Duplicate admission Number found,try a different one","Duplicate admission Number found,try a different one"));
				}
				else
				{*/


		int agreement = DBM.checkAgreementFor(DBM.schoolId(), conn);
		int currentStrength = Integer.parseInt(DBM.allStudentcount(DBM.schoolId(),"", "",session,"", conn));


		if(agreement<500)
		{
			if(currentStrength>=(agreement+25))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
				return "";
			}

		}
		else
		{
			if(currentStrength>=(agreement+50))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
				return "";
			}

		}

		if(conn!=null)
		{
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		boolean check=true;
		if(studentstatus.equalsIgnoreCase("New"))
		{
			String[] sesion=(DatabaseMethods1.selectedSessionDetails(schid,conn)).split("-");

			Date startdate = null;
			Date endDate = null;
			try {
				if(info.getSchoolSession().equals("4-3"))
				{
					startdate=new  SimpleDateFormat("dd/MM/yyyy").parse("31/03/"+sesion[0]);
					endDate = new  SimpleDateFormat("dd/MM/yyyy").parse("01/04/"+sesion[1]);
				}
				else
				{
					startdate=new  SimpleDateFormat("dd/MM/yyyy").parse("30/04/"+sesion[0]);
					endDate = new  SimpleDateFormat("dd/MM/yyyy").parse("01/05/"+sesion[1]);
				}

			} catch (ParseException e) {
				e.printStackTrace();
			}

			if(addmissionDate.after(startdate)&&addmissionDate.before(endDate))
			{
				check=true;
			}
			else
			{
				check=false;
			}
		}
		
		int checker = DBM.checkingForDuplAdmNoAllowed(conn);
		int status = 0;
		if (checker == 1) {
			if (!addmissionNumber.trim().equalsIgnoreCase(""))
				status = DBM.duplicateStudentEntry(DBM.schoolId(), addmissionNumber, conn);
		}
		if (status == 1) {
			studentImage=null;
			FacesContext fc = FacesContext.getCurrentInstance();
			fc.addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_ERROR,
							"Duplicate admission Number found,try a different one",
							"Duplicate admission Number found,try a different one"));
		}
		else
		{
			if(check==true)
			{
				srnoType = info.getSrnoType();

				if(srnoType.equalsIgnoreCase("auto"))
				{
					boolean checkStu = DBM.checkStudentsInSchool(info.getSchid(),conn);
					if(checkStu==false)
					{
						addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
					}
					else
					{
						addmissionNumber = info.getSrnoPrefix()+DBM.autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
					}
				}
				conceesionCategory=DBM.concessionCategoryNameById(schid,concession, conn);
				if(conceesionCategory.equalsIgnoreCase("General"))
				{
					concessionStatus="accepted";
				}
				else
				{
					if(info.getConcessionRequest().equals("no"))
					{
						concessionStatus="accepted";
					}
					else
					{
						concessionStatus="pending";
					}
				}

				int i=	DBM.studentRegistration(admRemark,schid,addmissionDate,fname,dob,/*className1,*/selectedSection,aadharNo,fathersPhone,currAdd,perAdd,
						gender,nationality,religion,category,bpl,bplCardNo,pincode,singleChild,SingleParent,caste,country,ffname,mname,fatherEmail,fatherAadharNo,motherAadhaar,
						mothersPhone,residencePhone,livingWith,lastSchoolName,passedClass,medium,pResult,boardName,p_percent,pReason/*,tcDate*/,height,weight,eyes,
						fname1,relation1,occupation1,phone1,address1,fname2,relation2,occupation2,phone2,address2,fatherQualification,fatherDesignation,fatherOfficeAdd,
						fatherSchoolEmp,motherQualification,motherDesignation,motherOfficeAdd,motherSchoolEmp,routeName1,concession,hostal,houseName,
						sname1,sClassName1,sname2,sClassName2,documentsSubmitted,studentImage,fatherImage,motherImage,g1Image,g2Image,motherEmail,bloodGroup/*,"",""*/
						,fatherofficecontcatno,motherofficecontactno,studentstatus,rollno,discountFee,disability,handicap,conn,studentPhone,
						addmissionNumber,concessionStatus,"temp",className1,"","","","","","","","","","","","","","");
				if(i>=1)
				{
					int maxnumber=i;
					DBM.updateStudentId("CB"+String.valueOf(maxnumber),i,conn);
					if(routeName1.equals(""))
					{
						DBM.transportDataEntry(schid,addmissionDate,"CB"+String.valueOf(maxnumber), routeName1, "No", className1,conn);
					}
					else
					{
						DBM.transportDataEntry(schid,addmissionDate,"CB"+String.valueOf(maxnumber), routeName1, "Yes", className1,conn);
					}

					new DataBaseMeathodJson().addclassAttendanceINNew(selectedSection,new Date(),schid,conn);
					FacesContext fc=FacesContext.getCurrentInstance();
					fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Student Added Successfully","Student Added Successfully"));
					//new DatabaseMethods1().addUserName(addmissionNumber,"123456","student");
					DBM.increaseStudentInAddSchool(schid,conn);
					String className=DBM.classNameFromidSchid(schid,className1,DatabaseMethods1.selectedSessionDetails(schid,conn),conn);
					classTestList=DBM.selectedClassTestList(schid,className1,selectedSection,conn);
					examList=DBM.selectedClassExamList(schid,selectedSection,conn);

					for(ClassTest ct:classTestList)
					{
						testStatus=DBM.checkClassTestPerformanceStatus(schid,ct.getId(),conn);
						if(testStatus==true)
						{
							new DataBaseOnlineAdm().entryOfNewStudentInClassTestPerformanceSession(schid,DatabaseMethods1.selectedSessionDetails(schid,conn),"CB"+String.valueOf(maxnumber),ct.getId(),conn);
						}
						else
						{

						}
					}
					for(ExamInfo ee:examList)
					{
						new DataBaseOnlineAdm().entryOfNewStudentInExamPerformanceSession(schid,DatabaseMethods1.selectedSessionDetails(schid,conn),"CB"+String.valueOf(maxnumber),ee.getClassid(),ee.getSubjectid(),ee.getSemesterid(),ee.getExamid(),ee.getExamType(),conn,ee.getMaxMark(),ee.getExamName());
					}

					if(message.equals("true"))
					{
						String typeMessage="";
						if(String.valueOf(fathersPhone).length()==10
								&& !String.valueOf(fathersPhone).equals("9999999999")
								&& !String.valueOf(fathersPhone).equals("1111111111")
								&& !String.valueOf(fathersPhone).equals("1234567890")
								&& !String.valueOf(fathersPhone).equals("0123456789"))
						{
							if(info.getSchoolAppName().equalsIgnoreCase("N/A"))
							{
								typeMessage="Dear Parent,"+"\n"+"Thank You for admission of your ward "+fname+" in class "+className+". Now you can access your ward's information on your mobile."+"\n"+"Regards\n"+info.getSmsSchoolName();

							}
							else
							{
								typeMessage="Dear Parent,"+"\n"+"Thank You for admission of your ward "+fname+" in class "+className+". Now you can access your ward's information on your mobile. Please search "+info.getSchoolAppName()+" on Google Playstore or Apple store. Enter your registered mobile no. and get OTP verified instantly. We welcome you to be a part of Digital India !"+"\n"+"Regards\n"+info.getSmsSchoolName();

							}
							DBM.messageurl1(String.valueOf(fathersPhone), typeMessage,"CB"+String.valueOf(maxnumber),conn,schid,"");
						}
					}
					HttpSession ss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
					ss.setAttribute("addNo", "CB"+String.valueOf(maxnumber));
					ss.setAttribute("name", fname);
					ss.setAttribute("selectedClass",selectedSection);
					try {
						conn.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
					return "masterRegistration.xhtml";
				}
			}
			else
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"If Student New Please Date Must Be In This Session","If Student New Please Date Must Be In This Session "));
			}
		}

		if(conn!=null)
		{
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return "";
	}
	
	public ArrayList<SelectItem> getCategoryList() {
		return categoryList;
	}
	public void setCategoryList(ArrayList<SelectItem> categoryList) {
		this.categoryList = categoryList;
	}
	public ArrayList<SelectItem> getDiscountList() {
		return discountList;
	}
	public void setDiscountList(ArrayList<SelectItem> discountList) {
		this.discountList = discountList;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public long getFathersPhone() {
		return fathersPhone;
	}
	public void setFathersPhone(long fathersPhone) {
		this.fathersPhone = fathersPhone;
	}
	public long getMothersPhone() {
		return mothersPhone;
	}
	public void setMothersPhone(long mothersPhone) {
		this.mothersPhone = mothersPhone;
	}
	public Date getAddmissionDate() {
		return addmissionDate;
	}
	public void setAddmissionDate(Date addmissionDate) {
		this.addmissionDate = addmissionDate;
	}
	public Date getDob() {
		return dob;
	}
	public void setDob(Date dob) {
		this.dob = dob;
	}
	public String getFname() {
		return fname;
	}
	public void setFname(String fname) {
		this.fname = fname;
	}
	public String getLname() {
		return lname;
	}
	public void setLname(String lname) {
		this.lname = lname;
	}
	public String getFfname() {
		return ffname;
	}
	public void setFfname(String ffname) {
		this.ffname = ffname;
	}
	public String getMname() {
		return mname;
	}
	public void setMname(String mname) {
		this.mname = mname;
	}
	public String getClassName1() {
		return className1;
	}
	public void setClassName1(String className1) {
		this.className1 = className1;
	}
	public String getRouteName1() {
		return routeName1;
	}
	public void setRouteName1(String routeName1) {
		this.routeName1 = routeName1;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getNationality() {
		return nationality;
	}
	public void setNationality(String nationality) {
		this.nationality = nationality;
	}
	public String getReligion() {
		return religion;
	}
	public void setReligion(String religion) {
		this.religion = religion;
	}
	public String getCurrAdd() {
		return currAdd;
	}
	public void setCurrAdd(String currAdd) {
		this.currAdd = currAdd;
	}
	public String getPerAdd() {
		return perAdd;
	}
	public void setPerAdd(String perAdd) {
		this.perAdd = perAdd;
	}
	public int getPincode() {
		return pincode;
	}
	public void setPincode(int pincode) {
		this.pincode = pincode;
	}
	public String getCountry() {
		return country;
	}
	public void setCountry(String country) {
		this.country = country;
	}
	public List<SelectItem> getRouteList() {
		return routeList;
	}
	public void setRouteList(List<SelectItem> routeList) {
		this.routeList = routeList;
	}
	public List<SelectItem> getClassList() {
		return classList;
	}
	public void setClassList(List<SelectItem> classList) {
		this.classList = classList;
	}
	public String getRoute() {
		return route;
	}
	public void setRoute(String route) {
		this.route = route;
	}
	public String getClassName() {
		return className;
	}
	public void setClassName(String className) {
		this.className = className;
	}
	public String getAddmissionNumber() {
		return addmissionNumber;
	}
	public void setAddmissionNumber(String addmissionNumber) {
		this.addmissionNumber = addmissionNumber;
	}
	public ArrayList<SelectItem> getSectionList() {
		return sectionList;
	}
	public void setSectionList(ArrayList<SelectItem> sectionList) {
		this.sectionList = sectionList;
	}
	public String getSelectedSection() {
		return selectedSection;
	}
	public void setSelectedSection(String selectedSection) {
		this.selectedSection = selectedSection;
	}
	public UploadedFile getStudentImage() {
		return studentImage;
	}
	public void setStudentImage(UploadedFile studentImage) {
		this.studentImage = studentImage;
	}
	public String getResidencePhone() {
		return residencePhone;
	}
	public void setResidencePhone(String residencePhone) {
		this.residencePhone = residencePhone;
	}
	public String getFathersOccupation() {
		return fathersOccupation;
	}
	public void setFathersOccupation(String fathersOccupation) {
		this.fathersOccupation = fathersOccupation;
	}
	public String getBpl() {
		return bpl;
	}
	public void setBpl(String bpl) {
		this.bpl = bpl;
	}
	public String getBplCardNo() {
		return bplCardNo;
	}
	public void setBplCardNo(String bplCardNo) {
		this.bplCardNo = bplCardNo;
	}
	public String getCaste() {
		return caste;
	}
	public void setCaste(String caste) {
		this.caste = caste;
	}
	public String getSingleChild() {
		return singleChild;
	}
	public void setSingleChild(String singleChild) {
		this.singleChild = singleChild;
	}
	public String getBloodGroup() {
		return bloodGroup;
	}
	public void setBloodGroup(String bloodGroup) {
		this.bloodGroup = bloodGroup;
	}
	public String getAadharNo() {
		return aadharNo;
	}
	public void setAadharNo(String aadharNo) {
		this.aadharNo = aadharNo;
	}
	public String getSingleParent() {
		return SingleParent;
	}
	public void setSingleParent(String singleParent) {
		SingleParent = singleParent;
	}
	public String getLivingWith() {
		return livingWith;
	}
	public void setLivingWith(String livingWith) {
		this.livingWith = livingWith;
	}
	public String getFatherEmail() {
		return fatherEmail;
	}
	public void setFatherEmail(String fatherEmail) {
		this.fatherEmail = fatherEmail;
	}
	public String getMotherEmail() {
		return motherEmail;
	}
	public void setMotherEmail(String motherEmail) {
		this.motherEmail = motherEmail;
	}
	public boolean isShowBpl() {
		return showBpl;
	}
	public void setShowBpl(boolean showBpl) {
		this.showBpl = showBpl;
	}
	public String getConcession() {
		return concession;
	}
	public void setConcession(String concession) {
		this.concession = concession;
	}
	public UploadedFile getFatherImage() {
		return fatherImage;
	}
	public void setFatherImage(UploadedFile fatherImage) {
		this.fatherImage = fatherImage;
	}
	public UploadedFile getMotherImage() {
		return motherImage;
	}
	public void setMotherImage(UploadedFile motherImage) {
		this.motherImage = motherImage;
	}
	public UploadedFile getG1Image() {
		return g1Image;
	}
	public void setG1Image(UploadedFile g1Image) {
		this.g1Image = g1Image;
	}
	public UploadedFile getG2Image() {
		return g2Image;
	}
	public void setG2Image(UploadedFile g2Image) {
		this.g2Image = g2Image;
	}
	public String getSendMessageMobileNo() {
		return sendMessageMobileNo;
	}

	public void setSendMessageMobileNo(String sendMessageMobileNo) {
		this.sendMessageMobileNo = sendMessageMobileNo;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getFname1() {
		return fname1;
	}

	public void setFname1(String fname1) {
		this.fname1 = fname1;
	}

	public String getLname1() {
		return lname1;
	}

	public void setLname1(String lname1) {
		this.lname1 = lname1;
	}

	public String getRelation1() {
		return relation1;
	}

	public void setRelation1(String relation1) {
		this.relation1 = relation1;
	}

	public String getOccupation1() {
		return occupation1;
	}

	public void setOccupation1(String occupation1) {
		this.occupation1 = occupation1;
	}

	public String getPhone1() {
		return phone1;
	}

	public void setPhone1(String phone1) {
		this.phone1 = phone1;
	}

	public String getAddress1() {
		return address1;
	}

	public void setAddress1(String address1) {
		this.address1 = address1;
	}

	public String getFname2() {
		return fname2;
	}

	public void setFname2(String fname2) {
		this.fname2 = fname2;
	}

	public String getLname2() {
		return lname2;
	}

	public void setLname2(String lname2) {
		this.lname2 = lname2;
	}

	public String getRelation2() {
		return relation2;
	}

	public void setRelation2(String relation2) {
		this.relation2 = relation2;
	}

	public String getOccupation2() {
		return occupation2;
	}

	public void setOccupation2(String occupation2) {
		this.occupation2 = occupation2;
	}

	public String getPhone2() {
		return phone2;
	}

	public void setPhone2(String phone2) {
		this.phone2 = phone2;
	}

	public String getAddress2() {
		return address2;
	}

	public void setAddress2(String address2) {
		this.address2 = address2;
	}

	public String getLastSchoolName() {
		return lastSchoolName;
	}

	public void setLastSchoolName(String lastSchoolName) {
		this.lastSchoolName = lastSchoolName;
	}

	public String getPassedClass() {
		return passedClass;
	}

	public void setPassedClass(String passedClass) {
		this.passedClass = passedClass;
	}

	public String getMedium() {
		return medium;
	}

	public void setMedium(String medium) {
		this.medium = medium;
	}

	public String getSname1() {
		return sname1;
	}

	public void setSname1(String sname1) {
		this.sname1 = sname1;
	}

	public String getSname2() {
		return sname2;
	}

	public void setSname2(String sname2) {
		this.sname2 = sname2;
	}

	public String getSclassid1() {
		return sclassid1;
	}

	public void setSclassid1(String sclassid1) {
		this.sclassid1 = sclassid1;
	}

	public String getSclassid2() {
		return sclassid2;
	}

	public void setSclassid2(String sclassid2) {
		this.sclassid2 = sclassid2;
	}

	public String getsClassName1() {
		return sClassName1;
	}

	public void setsClassName1(String sClassName1) {
		this.sClassName1 = sClassName1;
	}

	public String getsClassName2() {
		return sClassName2;
	}

	public void setsClassName2(String sClassName2) {
		this.sClassName2 = sClassName2;
	}

	public ArrayList<String> getDocumentsSubmitted() {
		return documentsSubmitted;
	}

	public void setDocumentsSubmitted(ArrayList<String> documentsSubmitted) {
		this.documentsSubmitted = documentsSubmitted;
	}

	public boolean isCompleted() {
		return completed;
	}

	public void setCompleted(boolean completed) {
		this.completed = completed;
	}

	public ArrayList<StudentInfo> getStudentList() {
		return studentList;
	}

	public void setStudentList(ArrayList<StudentInfo> studentList) {
		this.studentList = studentList;
	}

	public String getpResult() {
		return pResult;
	}

	public void setpResult(String pResult) {
		this.pResult = pResult;
	}

	public String getP_percent() {
		return p_percent;
	}

	public void setP_percent(String p_percent) {
		this.p_percent = p_percent;
	}

	public String getpReason() {
		return pReason;
	}

	public void setpReason(String pReason) {
		this.pReason = pReason;
	}

	public String getHeight() {
		return height;
	}

	public void setHeight(String height) {
		this.height = height;
	}

	public String getWeight() {
		return weight;
	}

	public void setWeight(String weight) {
		this.weight = weight;
	}

	public String getEyes() {
		return eyes;
	}

	public void setEyes(String eyes) {
		this.eyes = eyes;
	}

	public String getFatherQualification() {
		return fatherQualification;
	}

	public void setFatherQualification(String fatherQualification) {
		this.fatherQualification = fatherQualification;
	}

	public String getMotherQualification() {
		return motherQualification;
	}

	public void setMotherQualification(String motherQualification) {
		this.motherQualification = motherQualification;
	}

	public String getMotherOccupation() {
		return motherOccupation;
	}

	public void setMotherOccupation(String motherOccupation) {
		this.motherOccupation = motherOccupation;
	}

	public String getFatherDesignation() {
		return fatherDesignation;
	}

	public void setFatherDesignation(String fatherDesignation) {
		this.fatherDesignation = fatherDesignation;
	}

	public String getMotherDesignation() {
		return motherDesignation;
	}

	public void setMotherDesignation(String motherDesignation) {
		this.motherDesignation = motherDesignation;
	}

	public String getFatherOrganization() {
		return fatherOrganization;
	}

	public void setFatherOrganization(String fatherOrganization) {
		this.fatherOrganization = fatherOrganization;
	}

	public String getMotherOrganization() {
		return motherOrganization;
	}

	public void setMotherOrganization(String motherOrganization) {
		this.motherOrganization = motherOrganization;
	}

	public String getFatherOfficeAdd() {
		return fatherOfficeAdd;
	}

	public void setFatherOfficeAdd(String fatherOfficeAdd) {
		this.fatherOfficeAdd = fatherOfficeAdd;
	}

	public String getMotherOfficeAdd() {
		return motherOfficeAdd;
	}

	public void setMotherOfficeAdd(String motherOfficeAdd) {
		this.motherOfficeAdd = motherOfficeAdd;
	}

	public String getFatherIncome() {
		return fatherIncome;
	}

	public void setFatherIncome(String fatherIncome) {
		this.fatherIncome = fatherIncome;
	}

	public String getMotherIncome() {
		return motherIncome;
	}

	public void setMotherIncome(String motherIncome) {
		this.motherIncome = motherIncome;
	}

	public String getFatherAadhaar() {
		return FatherAadhaar;
	}

	public void setFatherAadhaar(String fatherAadhaar) {
		FatherAadhaar = fatherAadhaar;
	}

	public String getMotherAadhaar() {
		return motherAadhaar;
	}

	public void setMotherAadhaar(String motherAadhaar) {
		this.motherAadhaar = motherAadhaar;
	}

	public String getFatherSchoolEmp() {
		return fatherSchoolEmp;
	}

	public void setFatherSchoolEmp(String fatherSchoolEmp) {
		this.fatherSchoolEmp = fatherSchoolEmp;
	}

	public String getMotherSchoolEmp() {
		return motherSchoolEmp;
	}

	public void setMotherSchoolEmp(String motherSchoolEmp) {
		this.motherSchoolEmp = motherSchoolEmp;
	}

	public Date getTcDate() {
		return tcDate;
	}

	public void setTcDate(Date tcDate) {
		this.tcDate = tcDate;
	}

	public String getFatherAadharNo() {
		return fatherAadharNo;
	}

	public void setFatherAadharNo(String fatherAadharNo) {
		this.fatherAadharNo = fatherAadharNo;
	}

	public String getBoardName() {
		return boardName;
	}

	public void setBoardName(String boardName) {
		this.boardName = boardName;
	}

	public String getHostal() {
		return hostal;
	}

	public void setHostal(String hostal) {
		this.hostal = hostal;
	}

	public String getHouseName() {
		return houseName;
	}

	public void setHouseName(String houseName) {
		this.houseName = houseName;
	}

	public List<SelectItem> getConnsessionList() {
		return connsessionList;
	}

	public void setConnsessionList(List<SelectItem> connsessionList) {
		this.connsessionList = connsessionList;
	}

	public String getRouteFees() {
		return routeFees;
	}

	public void setRouteFees(String routeFees) {
		this.routeFees = routeFees;
	}

	public String getDiscountFee() {
		return discountFee;
	}

	public void setDiscountFee(String discountFee) {
		this.discountFee = discountFee;
	}

	public String getTotalFess() {
		return TotalFess;
	}

	public void setTotalFess(String totalFess) {
		TotalFess = totalFess;
	}

	public ArrayList<SelectItem> getReligionList() {
		return religionList;
	}

	public void setReligionList(ArrayList<SelectItem> religionList) {
		this.religionList = religionList;
	}
	public String getRollno() {
		return rollno;
	}

	public void setRollno(String rollno) {
		this.rollno = rollno;
	}

	public ArrayList<SelectItem> getHandicaplist() {
		return handicaplist;
	}

	public void setHandicaplist(ArrayList<SelectItem> handicaplist) {
		this.handicaplist = handicaplist;
	}

	public String getStudentstatus() {
		return studentstatus;
	}

	public void setStudentstatus(String studentstatus) {
		this.studentstatus = studentstatus;
	}

	public ArrayList<SelectItem> getHouseCategorylist() {
		return houseCategorylist;
	}

	public void setHouseCategorylist(ArrayList<SelectItem> houseCategorylist) {
		this.houseCategorylist = houseCategorylist;
	}

	public String getDisability() {
		return disability;
	}

	public void setDisability(String disability) {
		this.disability = disability;
	}

	public String getHandicap() {
		return handicap;
	}

	public void setHandicap(String handicap) {
		this.handicap = handicap;
	}

	public String getNewHouse() {
		return newHouse;
	}

	public void setNewHouse(String newHouse) {
		this.newHouse = newHouse;
	}

	public String getMotherofficecontactno() {
		return motherofficecontactno;
	}

	public void setMotherofficecontactno(String motherofficecontactno) {
		this.motherofficecontactno = motherofficecontactno;
	}

	public String getFatherofficecontcatno() {
		return fatherofficecontcatno;
	}

	public void setFatherofficecontcatno(String fatherofficecontcatno) {
		this.fatherofficecontcatno = fatherofficecontcatno;
	}
	public ArrayList<SelectItem> getDoctypelist() {
		return doctypelist;
	}

	public void setDoctypelist(ArrayList<SelectItem> doctypelist) {
		this.doctypelist = doctypelist;
	}

	public String getDoctype() {
		return doctype;
	}

	public void setDoctype(String doctype) {
		this.doctype = doctype;
	}


	public boolean isShowDis() {
		return showDis;
	}


	public void setShowDis(boolean showDis) {
		this.showDis = showDis;
	}


	public double getHostelfees() {
		return hostelfees;
	}


	public void setHostelfees(double hostelfees) {
		this.hostelfees = hostelfees;
	}


	public String getStudentPhone() {
		return studentPhone;
	}


	public void setStudentPhone(String studentPhone) {
		this.studentPhone = studentPhone;
	}


	public boolean isShowInstitute() {
		return showInstitute;
	}


	public void setShowInstitute(boolean showInstitute) {
		this.showInstitute = showInstitute;
	}


	public ArrayList<ClassTest> getClassTestList() {
		return classTestList;
	}


	public void setClassTestList(ArrayList<ClassTest> classTestList) {
		this.classTestList = classTestList;
	}


	public ArrayList<ExamInfo> getExamList() {
		return examList;
	}


	public void setExamList(ArrayList<ExamInfo> examList) {
		this.examList = examList;
	}


	public boolean isTestStatus() {
		return testStatus;
	}


	public void setTestStatus(boolean testStatus) {
		this.testStatus = testStatus;
	}


	public boolean isExamStatus() {
		return examStatus;
	}


	public void setExamStatus(boolean examStatus) {
		this.examStatus = examStatus;
	}


	public String getConceesionCategory() {
		return conceesionCategory;
	}


	public void setConceesionCategory(String conceesionCategory) {
		this.conceesionCategory = conceesionCategory;
	}


	public String getConcessionStatus() {
		return concessionStatus;
	}


	public void setConcessionStatus(String concessionStatus) {
		this.concessionStatus = concessionStatus;
	}


	public String getSrnoType() {
		return srnoType;
	}


	public void setSrnoType(String srnoType) {
		this.srnoType = srnoType;
	}


	public String getSrnoPrefix() {
		return srnoPrefix;
	}


	public void setSrnoPrefix(String srnoPrefix) {
		this.srnoPrefix = srnoPrefix;
	}


	public String getSrnoStart() {
		return srnoStart;
	}


	public void setSrnoStart(String srnoStart) {
		this.srnoStart = srnoStart;
	}


	public boolean isDisableSrNo() {
		return disableSrNo;
	}


	public void setDisableSrNo(boolean disableSrNo) {
		this.disableSrNo = disableSrNo;
	}


	public SchoolInfoList getInfo() {
		return info;
	}


	public void setInfo(SchoolInfoList info) {
		this.info = info;
	}


	public ArrayList<SelectItem> getBranchList() {
		return branchList;
	}


	public void setBranchList(ArrayList<SelectItem> branchList) {
		this.branchList = branchList;
	}

	public String getSchid() {
		return schid;
	}

	public void setSchid(String schid) {
		this.schid = schid;
	}

	public String getAdmRemark() {
		return admRemark;
	}

	public void setAdmRemark(String admRemark) {
		this.admRemark = admRemark;
	}



}
