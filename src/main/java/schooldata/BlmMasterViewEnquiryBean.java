package schooldata;

import java.io.IOException;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpSession;

import org.primefaces.PrimeFaces;
import org.primefaces.model.file.UploadedFile;

import Json.DataBaseMeathodJson;
import exam_module.ExamInfo;
import session_work.RegexPattern;
import student_module.DataBaseOnlineAdm;

@ManagedBean(name="viewEnquiryForBlmMaster")
@ViewScoped

public class BlmMasterViewEnquiryBean implements Serializable
{
	private static final long serialVersionUID = 1L;
	String regex=RegexPattern.REGEX;
	ArrayList<StudentInfo1>list,selectedstudent;
	ArrayList<ClassTest> classTestList;
	ArrayList<ExamInfo>examList;
	boolean testStatus=false,examStatus=false;
	String studentName,gender,address,mobno,email,fatherName,motherName,admissionNo,paymentMode="cash",remark,refNo,schoolid,balMsg,clsName,cbNumber;
	Date dob,admissionDate;
	double feeAmount,discountAmount=0,smsLimit;
	double feeAmountPro=250,feeAmountRegistration=1500;
	boolean check,checkaccpect;
	StudentInfo1 selectStudent;
	String selecttype="pending";
	String selectYear;
	String typemessage;
	boolean chequeShow;
	String country,addmissionNumber,className1,selectedSection,routeName1="",routeFees="0",discountFee="0",totalFees="0";
	Date addmissionDate=new Date();
	ArrayList<SelectItem> sectionList,classList,routeList,connsessionList;
	ArrayList<String> documentsSubmitted=new ArrayList<>();
	UploadedFile fatherImage,motherImage,g1Image,g2Image,studentImage;
	Date tcDate;
	ArrayList<SelectItem>yearlist=new ArrayList<>();
	ArrayList<SelectItem> branchList=new ArrayList<>();
	ArrayList<FeeInfo> admFeeList = new ArrayList<>();
	String message,type,schid,session;
	Date chequeDate=new Date();
	String srnoType,srnoPrefix,srnoStart,chequeNo;
	DatabaseMethods1 DBM=new DatabaseMethods1();
	boolean disableSrNo; //with getter - setter
	SchoolInfoList info;

	public BlmMasterViewEnquiryBean()
	{
		schoolid="All";
		Connection conn=DataBaseConnection.javaConnection();
		HttpSession sss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		
		schid=DBM.schoolId();
		session=DBM.selectedSessionDetails(schid, conn);
		
		message=(String) sss.getAttribute("registration");
		branchList = (ArrayList<SelectItem>) sss.getAttribute("branchList");
		Date d=new  Date();
		int year=d.getYear()+1900;
		selectYear=String.valueOf(year);
		for(int i=2015;i<=year;i++)
		{
			SelectItem ss=new SelectItem();
			ss.setLabel(String.valueOf(i));
			ss.setValue(String.valueOf(i));
			yearlist.add(ss);
		}
		check=false;

		//		classList = new DatabaseMethods1().allClass(conn);
		//		connsessionList=new DatabaseMethods1().allConnsessionType(conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void searchEnquiry()
	{
		DatabaseMethods1 obj = new DatabaseMethods1();
		Connection conn=DataBaseConnection.javaConnection();
		type="sinlge";
		list=obj.studentEnquiryByRefNoAndSchid(schoolid, refNo, conn, type);
		if(list.size()>0)
		{
			check=true;
			if(selecttype.equals("pending"))
			{
				checkaccpect=true;

			}
			else
			{
				checkaccpect=false;
			}

			/*info = obj.fullSchoolInfo(conn);
	        srnoType = info.getSrnoType();

	        if(srnoType.equalsIgnoreCase("manual"))
	        {
	                disableSrNo = false;
	                addmissionNumber = "";
	        }
	        else
	        {
	                disableSrNo = true;
	                boolean check = obj.checkStudentsInSchool(info.getSchid(),conn);
	                if(check==false)
	                {
	                    addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
	                }
	                else
	                {
	                    addmissionNumber = info.getSrnoPrefix()+obj.autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
	                }
	                //
	        }*/
		}
		else
		{
			check=false;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("No Enquiry Found By This Reference No. Please Try Again!"));
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void checkPaymentMode()
	{
		if(paymentMode.equalsIgnoreCase("cash"))
		{
			chequeShow=false;

		}
		else
		{
			chequeShow=true;

		}
	}

	public void searchAllEnquiry()
	{
		DatabaseMethods1 obj = new DatabaseMethods1();
		Connection conn=DataBaseConnection.javaConnection();
		type="all";
		list=obj.studentEnquiryByRefNoAndSchid(schoolid, refNo, conn, type);
		if(list.size()>0)
		{
			check=true;
			if(selecttype.equals("pending"))
			{
				checkaccpect=true;

			}
			else
			{
				checkaccpect=false;
			}


		}
		else
		{
			check=false;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("No Enquiry Found By This Reference No. Please Try Again!"));
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void allSections()
	{
		Connection conn=DataBaseConnection.javaConnection();
		sectionList=new DatabaseMethods1().allSection(selectStudent.getSchid(),className1,conn);
		selectedSection=(String) sectionList.get(0).getValue();
		admFeeList = new ArrayList<>();
		admFeeList = new DatabaseMethods1().obtainAdmissionFeeListBLM(selectStudent.getSchid(), className1,selectStudent.getSession() ,conn);
		feeAmount=0;
		paymentMode="cash";
		remark="";

		if(admFeeList.size()>0)
		{
			for(FeeInfo ss : admFeeList)
			{
				feeAmount = feeAmount + ss.getAmount();
			}
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void calculateAmount()
	{
		feeAmount=0;
		for(FeeInfo ss : admFeeList)
		{
			if(ss.getPayDiscount()>ss.getAmount())
			{
				ss.setPayDiscount(0);
			}
			feeAmount = feeAmount + (ss.getAmount()-ss.getPayDiscount());
		}
	}

	/*	public void sendMessage()
	{
		Connection conn=DataBaseConnection.javaConnection();
		if(selectedstudent.size()>0)
		{
			for(StudentInfo1 ls:selectedstudent)
			{
				new DatabaseMethods1().messageurl1(ls.getMobno(), typemessage,"ENQ"+ls.getId(),conn,schoolid);
			}
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Message Sent!"));
		}
		else
		{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,"Please select student(s) to send message.","Please select student(s) to send message."));
		}


		typemessage="";
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}




	public void search()
	{
		Connection conn=DataBaseConnection.javaConnection();
		list=new DatabaseMethods1().allStudent(selecttype,selectYear,conn);
		if(list.size()>0)
		{
		   check=true;
		   if(selecttype.equals("pending"))
		   {
			  checkaccpect=true;

		    }
			else
			{
				checkaccpect=false;
			}
		}
		else
		{
			check=false;

		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	 */
	public void prospectusPayment()
	{
		Connection conn=DataBaseConnection.javaConnection();
		int receiptNo=Integer.parseInt(new DatabaseMethods1().recepietNoForother(selectStudent.getSchid(),conn))+1;
		int prosNo=Integer.parseInt(new DatabaseMethods1().prospectusNoForother(selectStudent.getSchid(),"PROSPECTUS",conn))+1;

		if(selectStudent.getSchid().equals("251") && receiptNo==1)
		{
			receiptNo = 6443;
		}
		else if (selectStudent.getSchid().equals("252") && receiptNo==1)
		{
			receiptNo = 566;
		}

		if(selectStudent.getSchid().equals("251") && prosNo==1)
		{
			prosNo = 1870;
		}
		else if (selectStudent.getSchid().equals("252") && prosNo==1)
		{
			prosNo = 175;
		}

		int i=new DatabaseMethods1().insertenquiryFeesSchid(selectStudent.getSchid(),selectStudent.getId(),"PROSPECTUS",feeAmountPro,receiptNo,paymentMode,remark,conn,String.valueOf(prosNo));
		if(i>=1)
			//if(true)
		{
			list=new DatabaseMethods1().studentEnquiryByRefNoAndSchid(schoolid,refNo, conn, type);

			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Fees Added Successfully"));


			HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
			ss.setAttribute("enqPaymentType","PROSPECTUS");
			ss.setAttribute("enqReceiptNo",String.valueOf(receiptNo));
			ss.setAttribute("enqNo",selectStudent.getRefNo());
			ss.setAttribute("prosRegNo",String.valueOf(prosNo));
			ss.setAttribute("enqStudentName",selectStudent.getStudentName());
			ss.setAttribute("enqFatherName",selectStudent.getFatherName());
			ss.setAttribute("enqMobile",selectStudent.getMobno());
			ss.setAttribute("enqAddress",selectStudent.getAddress());
			ss.setAttribute("enqPaymentMode",paymentMode.toUpperCase());
			ss.setAttribute("paymentDate",new SimpleDateFormat("dd MMM yyyy").format(new Date()));
			ss.setAttribute("enqClassName",selectStudent.getAdmissionclass());
			ss.setAttribute("amount",feeAmount);
			ss.setAttribute("schoolid", selectStudent.getSchid());
			ss.setAttribute("testDate","");

			feeAmount=0;
			paymentMode="cash";
			remark="";

			PrimeFaces.current().executeInitScript("window.open('printProsRegReceipt.xhtml')");

		}
		else
		{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Some Error Occured"));
		}
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public void registrationPayment()
	{
		Connection conn=DataBaseConnection.javaConnection();
		int receiptNo=Integer.parseInt(new DatabaseMethods1().recepietNoForother(selectStudent.getSchid(),conn))+1;
		int regNo=Integer.parseInt(new DatabaseMethods1().prospectusNoForother(selectStudent.getSchid(),"REGISTRATION",conn))+1;

		if(selectStudent.getSchid().equals("251") && receiptNo==1)
		{
			receiptNo = 6443;
		}
		else if (selectStudent.getSchid().equals("252") && receiptNo==1)
		{
			receiptNo = 566;
		}

		if(selectStudent.getSchid().equals("251") && regNo==1)
		{
			regNo = 1782;
		}
		else if (selectStudent.getSchid().equals("252") && regNo==1)
		{
			regNo = 174;
		}

		int i=new DatabaseMethods1().insertenquiryFeesSchid(selectStudent.getSchid(),selectStudent.getId(),"REGISTRATION",feeAmountRegistration,receiptNo,paymentMode,remark,conn,String.valueOf(regNo));
		if(i>=1)
			//	if(true)
		{
			list=new DatabaseMethods1().studentEnquiryByRefNoAndSchid(schoolid,refNo, conn, type);

			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Fees Added Successfully"));


			HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
			ss.setAttribute("enqPaymentType","REGISTRATION");
			ss.setAttribute("enqReceiptNo",String.valueOf(receiptNo));
			ss.setAttribute("enqNo",selectStudent.getRefNo());

			if(selectStudent.getSchid().equals("251"))
			{
				ss.setAttribute("prosRegNo","RGBLM"+String.valueOf(regNo));
			}
			else if (selectStudent.getSchid().equals("252"))
			{
				ss.setAttribute("prosRegNo","RGBBB"+String.valueOf(regNo));
			}
			else
			{
				ss.setAttribute("prosRegNo",String.valueOf(regNo));
			}


			ss.setAttribute("enqStudentName",selectStudent.getStudentName());
			ss.setAttribute("enqFatherName",selectStudent.getFatherName());
			ss.setAttribute("enqMobile",selectStudent.getMobno());
			ss.setAttribute("enqAddress",selectStudent.getAddress());
			ss.setAttribute("enqPaymentMode",paymentMode.toUpperCase());
			ss.setAttribute("paymentDate",new SimpleDateFormat("dd MMM yyyy").format(new Date()));
			ss.setAttribute("enqClassName",selectStudent.getAdmissionclass());
			ss.setAttribute("amount",feeAmount);
			ss.setAttribute("schoolid", selectStudent.getSchid());
			ss.setAttribute("testDate","");

			feeAmount=0;
			paymentMode="cash";
			remark="";

			PrimeFaces.current().executeInitScript("window.open('printProsRegReceipt.xhtml')");

		}
		else
		{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Some Error Occured"));
		}
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void printProspectusInv()
	{
		//String schid=new DatabaseMethods1().schoolId();
		Connection conn = DataBaseConnection.javaConnection();
		StudentInfo1 info = new DatabaseMethods1().enquiryFeeDetailsByEnqId(selectStudent.getId(), "PROSPECTUS", conn);

		HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		ss.setAttribute("enqPaymentType","PROSPECTUS");
		ss.setAttribute("enqReceiptNo",String.valueOf(info.getReceiptNo()));
		ss.setAttribute("enqNo",selectStudent.getRefNo());
		ss.setAttribute("prosRegNo",info.getProsRegNo());
		ss.setAttribute("enqStudentName",selectStudent.getStudentName());
		ss.setAttribute("enqFatherName",selectStudent.getFatherName());
		ss.setAttribute("enqMobile",selectStudent.getMobno());
		ss.setAttribute("enqAddress",selectStudent.getAddress());
		ss.setAttribute("enqPaymentMode",info.getPaymentMode().toUpperCase());
		ss.setAttribute("paymentDate",new SimpleDateFormat("dd MMM yyyy").format(info.getFollowDate()));
		ss.setAttribute("enqClassName",selectStudent.getAdmissionclass());
		ss.setAttribute("amount",info.getAmount());
		ss.setAttribute("schoolid", selectStudent.getSchid());
		ss.setAttribute("testDate","");
		PrimeFaces.current().executeInitScript("window.open('printProsRegReceipt.xhtml')");
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void printAdmInv()
	{
		//String schid=new DatabaseMethods1().schoolId();
		Connection conn = DataBaseConnection.javaConnection();
		StudentInfo1 info = new DatabaseMethods1().enquiryFeeDetailsByEnqId(selectStudent.getId(), "ADMISSION", conn);

		HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		ss.setAttribute("enqPaymentType","ADMISSION");
		ss.setAttribute("enqReceiptNo",String.valueOf(info.getReceiptNo()));
		ss.setAttribute("enqNo",selectStudent.getRefNo());
		ss.setAttribute("prosRegNo",info.getProsRegNo());
		ss.setAttribute("enqStudentName",selectStudent.getStudentName());
		ss.setAttribute("enqFatherName",selectStudent.getFatherName());
		ss.setAttribute("enqMobile",selectStudent.getMobno());
		ss.setAttribute("enqAddress",selectStudent.getAddress());
		ss.setAttribute("enqPaymentMode",info.getPaymentMode().toUpperCase());
		ss.setAttribute("paymentDate",new SimpleDateFormat("dd MMM yyyy").format(info.getFollowDate()));
		ss.setAttribute("enqClassName",selectStudent.getAdmissionclass());
		ss.setAttribute("amount",info.getAmount());
		ss.setAttribute("schoolid", selectStudent.getSchid());
		ss.setAttribute("testDate","");

		selectStudent.getAdmissionNo().split(":-:");

		admFeeList = new ArrayList<>();
		admFeeList = new DatabaseMethods1().obtainPaidAdmFeeListBLM(selectStudent.getSchid(),selectStudent.getId(),conn);
		ss.setAttribute("feelist",admFeeList);
		PrimeFaces.current().executeInitScript("window.open('printProsRegReceipt.xhtml')");
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void printRegInv()
	{
		//String schid=new DatabaseMethods1().schoolId();
		Connection conn = DataBaseConnection.javaConnection();
		StudentInfo1 info = new DatabaseMethods1().enquiryFeeDetailsByEnqId(selectStudent.getId(), "REGISTRATION", conn);

		HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		ss.setAttribute("enqPaymentType","REGISTRATION");
		ss.setAttribute("enqReceiptNo",String.valueOf(info.getReceiptNo()));
		ss.setAttribute("enqNo",selectStudent.getRefNo());
		if(selectStudent.getSchid().equals("251"))
		{
			ss.setAttribute("prosRegNo","RGBLM"+info.getProsRegNo());
		}
		else if (selectStudent.getSchid().equals("252"))
		{
			ss.setAttribute("prosRegNo","RGBBB"+info.getProsRegNo());
		}
		else
		{
			ss.setAttribute("prosRegNo",info.getProsRegNo());
		}
		ss.setAttribute("enqStudentName",selectStudent.getStudentName());
		ss.setAttribute("enqFatherName",selectStudent.getFatherName());
		ss.setAttribute("enqMobile",selectStudent.getMobno());
		ss.setAttribute("enqAddress",selectStudent.getAddress());
		ss.setAttribute("enqPaymentMode",info.getPaymentMode().toUpperCase());
		ss.setAttribute("paymentDate",new SimpleDateFormat("dd MMM yyyy").format(info.getFollowDate()));
		ss.setAttribute("enqClassName",selectStudent.getAdmissionclass());
		ss.setAttribute("amount",info.getAmount());
		ss.setAttribute("schoolid", selectStudent.getSchid());
		ss.setAttribute("testDate","");

		PrimeFaces.current().executeInitScript("window.open('printProsRegReceipt.xhtml')");
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void allClasses()
	{
		Connection conn=DataBaseConnection.javaConnection();
		classList = new DatabaseMethods1().allClass(selectStudent.getSchid(),conn);
		connsessionList=new DatabaseMethods1().allConnsessionType(selectStudent.getSchid(),conn);
		info = new DatabaseMethods1().fullSchoolInfo(selectStudent.getSchid(),conn);
		srnoType = info.getSrnoType();

		if(srnoType.equalsIgnoreCase("manual"))
		{
			disableSrNo = false;
			addmissionNumber = "";
		}
		else
		{
			disableSrNo = true;
			boolean check = new DatabaseMethods1().checkStudentsInSchool(info.getSchid(),conn);
			if(check==false)
			{
				addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
			}
			else
			{
				addmissionNumber = info.getSrnoPrefix()+new DatabaseMethods1().autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
			}
			//
		}
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void acceptStudent() throws IOException
	{
		DatabaseMethods1 DBM = new DatabaseMethods1();
		Connection conn=DataBaseConnection.javaConnection();

		int agreement = DBM.checkAgreementFor(DBM.schoolId(), conn);
		int currentStrength = Integer.parseInt(DBM.allStudentcount(schid,"", "",session,"", conn));


		if(agreement<500)
		{
			if(currentStrength>=(agreement+25))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
			}
			else
			{
				addStudent();
			}
		}
		else
		{
			if(currentStrength>=(agreement+50))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
			}
			else
			{
				addStudent();
			}
		}

		if(conn!=null)
		{
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public void addStudent()
	{
		DatabaseMethods1 DBM = new DatabaseMethods1();
		Connection conn=DataBaseConnection.javaConnection();
		SchoolInfoList info=DBM.fullSchoolInfo(selectStudent.getSchid(),conn);
		String concession = (String) connsessionList.get(0).getValue();
		String studentstatus = "new";
		smsLimit = new DatabaseMethods1().smsLimitReminder(selectStudent.getSchid(), conn);
		boolean check=true;
		if(studentstatus.equalsIgnoreCase("New"))
		{
			String[] sesion=(new DatabaseMethods1().selectedSessionDetails(selectStudent.getSchid(),conn)).split("-");
			Date startdate = null;
			Date endDate = null;
			try {
				if(info.getSchoolSession().equals("4-3"))
				{
					startdate=new  SimpleDateFormat("dd/MM/yyyy").parse("31/03/"+sesion[0]);
					endDate = new  SimpleDateFormat("dd/MM/yyyy").parse("01/04/"+sesion[1]);
				}
				else
				{
					startdate=new  SimpleDateFormat("dd/MM/yyyy").parse("30/04/"+sesion[0]);
					endDate = new  SimpleDateFormat("dd/MM/yyyy").parse("01/05/"+sesion[1]);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			if(addmissionDate.after(startdate)&&addmissionDate.before(endDate))
			{
				check=true;
			}
			else
			{
				check=false;
			}
		}
		
		int checker = DBM.checkingForDuplAdmNoAllowed(conn);
		int status = 0;
		if (checker == 1) {
			if (!addmissionNumber.trim().equalsIgnoreCase(""))
				status = DBM.duplicateStudentEntry(DBM.schoolId(), addmissionNumber, conn);
		}
		
		if (status == 1) {
			studentImage=null;
			FacesContext fc = FacesContext.getCurrentInstance();
			fc.addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_ERROR,
							"Duplicate admission Number found,try a different one",
							"Duplicate admission Number found,try a different one"));
		}
		else
		{
		
			if(check==true)
			{
				srnoType = info.getSrnoType();
	
				if(srnoType.equalsIgnoreCase("auto"))
				{
					boolean checkStu = new DatabaseMethods1().checkStudentsInSchool(info.getSchid(),conn);
					if(checkStu==false)
					{
						addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
					}
					else
					{
						addmissionNumber = info.getSrnoPrefix()+new DatabaseMethods1().autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
					}
				}
	
				int i = new DatabaseMethods1().studentRegistration(" ",selectStudent.getSchid(),addmissionDate, selectStudent.getStudentName(), selectStudent.getDob(),
						selectedSection, "", Long.valueOf(selectStudent.getMobno()), selectStudent.getAddress(),
						selectStudent.getAddress(), selectStudent.getGender(), "Indian", "", "", "", "", 0, "", "", "",
						"India", selectStudent.getFatherName(), selectStudent.getMotherName(), "", "", "",
						Long.valueOf(0), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
						"", "", "", "", "", "", "", "", "", routeName1, concession, "", "", "", "", "", "",
						documentsSubmitted, studentImage, fatherImage, motherImage, g1Image, g2Image, "", "", "", "",
						studentstatus, "", discountFee, "", "", conn, "", addmissionNumber,"accepted","temp",className1,"","","","","","","","","","","","","","");
	
				/*int i=	new DatabaseMethods1().studentRegistration(addmissionDate,selectStudent.getStudentName(),selectStudent.getDob(),className1,selectedSection,"",Long.valueOf(selectStudent.getMobno()),selectStudent.getAddress(),selectStudent.getAddress(),
						selectStudent.getGender(),"Indian","","","","",0,"","","","India",selectStudent.getFatherName(),selectStudent.getMotherName(),"","","",
						Long.valueOf(0),"","","","","","","","","",tcDate,"","","","","","","","","","","","","","","","","","","","","",routeName1,concession,"","",
						"","","","",documentsSubmitted,studentImage,fatherImage,motherImage,g1Image,g2Image,"","","",""
						,"","",studentstatus,"",discountFee,"","",conn,"",addmissionNumber);*/
				if(i>=1)
				{
					int maxnumber=i;
					cbNumber = String.valueOf(maxnumber);
					DBM.updateStudentId("CB"+String.valueOf(maxnumber),i,conn);
					if(routeName1.equals(""))
					{
						DBM.transportDataEntry(selectStudent.getSchid(),addmissionDate,"CB"+String.valueOf(maxnumber), routeName1, "No", className1,conn);
					}
					else
					{
						DBM.transportDataEntry(selectStudent.getSchid(),addmissionDate,"CB"+String.valueOf(maxnumber), routeName1, "Yes", className1,conn);
					}
	
					new DataBaseMeathodJson().addclassAttendanceINNew(selectedSection,new Date(),selectStudent.getSchid(),conn);
					FacesContext fc=FacesContext.getCurrentInstance();
					fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Student Added Successfully","Student Added Successfully"));
					DBM.increaseStudentInAddSchool(selectStudent.getSchid(),conn);
					String className=DBM.classNameFromidSchid(selectStudent.getSchid(),className1,DatabaseMethods1.selectedSessionDetails(selectStudent.getSchid(),conn),conn);
					classTestList=DBM.selectedClassTestList(selectStudent.getSchid(),className1,selectedSection,conn);
					examList=DBM.selectedClassExamList(selectStudent.getSchid(),selectedSection,conn);
					clsName = className;
					for(ClassTest ct:classTestList)
					{
						testStatus=DBM.checkClassTestPerformanceStatus(selectStudent.getSchid(),ct.getId(),conn);
						if(testStatus==true)
						{
							new DataBaseOnlineAdm().entryOfNewStudentInClassTestPerformanceSession(selectStudent.getSchid(),DatabaseMethods1.selectedSessionDetails(selectStudent.getSchid(),conn),"CB"+String.valueOf(maxnumber),ct.getId(),conn);
						}
						else
						{
	
						}
					}
					for(ExamInfo ee:examList)
					{
						new DataBaseOnlineAdm().entryOfNewStudentInExamPerformanceSession(selectStudent.getSchid(),DatabaseMethods1.selectedSessionDetails(selectStudent.getSchid(),conn),"CB"+String.valueOf(maxnumber),ee.getClassid(),ee.getSubjectid(),ee.getSemesterid(),ee.getExamid(),ee.getExamType(),conn, ee.getMaxMark(), ee.getExamName());
					}
	
	
					String id=selectStudent.getId();
					new DatabaseMethods1().accpectStudentByEnqiry(id,"CB"+String.valueOf(maxnumber)+":-:"+addmissionNumber+":-:"+className1,conn);
					int receiptNo=Integer.parseInt(new DatabaseMethods1().recepietNoForother(selectStudent.getSchid(),conn))+1;
					//String schid=new DatabaseMethods1().schoolId();
					if(selectStudent.getSchid().equals("251") && receiptNo==1)
					{
						receiptNo = 6443;
					}
					else if (selectStudent.getSchid().equals("252") && receiptNo==1)
					{
						receiptNo = 566;
					}
	
					new DatabaseMethods1().insertenquiryFeesSchid(selectStudent.getSchid(),selectStudent.getId(),"ADMISSION",feeAmount,receiptNo,paymentMode,remark,conn,addmissionNumber);
					new DatabaseMethods1().insertAdmFeesSchid(selectStudent.getSchid(),selectStudent.getId(),admFeeList,conn);
	
					list=new DatabaseMethods1().studentEnquiryByRefNoAndSchid(schoolid,refNo, conn, type);
					//
					//			        	FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Fees Added Successfully"));
					//
	
					HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
					ss.setAttribute("enqPaymentType","ADMISSION");
					ss.setAttribute("enqReceiptNo",String.valueOf(receiptNo));
					ss.setAttribute("enqNo",selectStudent.getRefNo());
					ss.setAttribute("prosRegNo",addmissionNumber);
					ss.setAttribute("enqStudentName",selectStudent.getStudentName());
					ss.setAttribute("enqFatherName",selectStudent.getFatherName());
					ss.setAttribute("enqMobile",selectStudent.getMobno());
					ss.setAttribute("enqAddress",selectStudent.getAddress());
					ss.setAttribute("enqPaymentMode",paymentMode.toUpperCase());
					ss.setAttribute("paymentDate",new SimpleDateFormat("dd MMM yyyy").format(new Date()));
					ss.setAttribute("enqClassName",selectStudent.getAdmissionclass());
					ss.setAttribute("amount",feeAmount);
					ss.setAttribute("schoolid", selectStudent.getSchid());
					ss.setAttribute("testDate","");
	
					for(FeeInfo ff : admFeeList)
					{
						ff.setAmount(ff.getAmount()-ff.getPayDiscount());
					}
	
					ss.setAttribute("feelist",admFeeList);
	
					feeAmount=0;
					paymentMode="cash";
					remark="";
	
					PrimeFaces.current().executeInitScript("window.open('printProsRegReceipt.xhtml')");
	
					//	HttpSession ss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
					ss.setAttribute("addNo", "CB"+String.valueOf(maxnumber));
					ss.setAttribute("name", selectStudent.getStudentName());
					ss.setAttribute("selectedClass",selectedSection);
	
	
					if(message.equals("true"))
					{
						String typeMessage="";
	
						double balance = new DatabaseMethods1().smsBalance(new DatabaseMethods1().schoolId(), conn);
						if(balance >0 && balance <= smsLimit)
						{
							balMsg = "Dear User, you are about to reach maximum limit of SMS credit. "
									+ "We suggest you to top-up your account today to ensure uninterrupted activity";
							PrimeFaces.current().executeInitScript("PF('MsgLmtDlg').show()");
							PrimeFaces.current().ajax().update("MsgLimitForm");
						}
						else if(balance <= 0)
						{
							balMsg = "Dear User,\n You have consumed the SMS credits received with your licence. Please renew immediately to continue.";
							PrimeFaces.current().executeInitScript("PF('MsgOvrDlg').show()");
							PrimeFaces.current().ajax().update("MsgOverForm");
						}
						else
						{
							if(selectStudent.getMobno().length()==10
									&& !selectStudent.getMobno().equals("2222222222")
									&& !selectStudent.getMobno().equals("9999999999")
									&& !selectStudent.getMobno().equals("1111111111")
									&& !selectStudent.getMobno().equals("1234567890")
									&& !selectStudent.getMobno().equals("0123456789"))
							{
								if(info.getSchoolAppName().equalsIgnoreCase("N/A"))
								{
									typeMessage="Dear Parent,"+"\n"+"Thank You for admission of your ward "+selectStudent.getStudentName()+" in class "+className+". Now you can access your ward's information on your mobile."+"\n"+"Regards\n"+info.getSmsSchoolName();
	
								}
								else
								{
									typeMessage="Dear Parent,"+"\n"+"Thank You for admission of your ward "+selectStudent.getStudentName()+" in class "+className+". Now you can access your ward's information on your mobile. Please search "+info.getSchoolAppName()+" on Google Playstore or Apple store. Enter your registered mobile no. and get OTP verified instantly. We welcome you to be a part of Digital India !"+"\n"+"Regards\n"+info.getSmsSchoolName();
	
								}
								DBM.messageurl1(selectStudent.getMobno(), typeMessage,"CB"+String.valueOf(maxnumber),conn,selectStudent.getSchid(),"");
							}
						}
	
	
					}
	
					try {
						conn.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
	
					//FacesContext.getCurrentInstance().getExternalContext().redirect("viewEnquiryForBlm.xhtml");
				}
			}
			else
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"If Student New Please Date Must Be In This Session","If Student New Please Date Must Be In This Session "));
			}
		}

		if(conn!=null)
		{
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public void sendMsg()
	{
		Connection conn = DataBaseConnection.javaConnection();
		SchoolInfoList info=new DatabaseMethods1().fullSchoolInfo(selectStudent.getSchid(),conn);
		if(message.equals("true"))
		{
			String typeMessage="";
			if(selectStudent.getMobno().length()==10
					&& !selectStudent.getMobno().equals("2222222222")
					&& !selectStudent.getMobno().equals("9999999999")
					&& !selectStudent.getMobno().equals("1111111111")
					&& !selectStudent.getMobno().equals("1234567890")
					&& !selectStudent.getMobno().equals("0123456789"))
			{
				if(info.getSchoolAppName().equalsIgnoreCase("N/A"))
				{
					typeMessage="Dear Parent,"+"\n"+"Thank You for admission of your ward "+selectStudent.getStudentName()+" in class "+clsName+". Now you can access your ward's information on your mobile."+"\n"+"Regards\n"+info.getSmsSchoolName();

				}
				else
				{
					typeMessage="Dear Parent,"+"\n"+"Thank You for admission of your ward "+selectStudent.getStudentName()+" in class "+clsName+". Now you can access your ward's information on your mobile. Please search "+info.getSchoolAppName()+" on Google Playstore or Apple store. Enter your registered mobile no. and get OTP verified instantly. We welcome you to be a part of Digital India !"+"\n"+"Regards\n"+info.getSmsSchoolName();

				}
				new DatabaseMethods1().messageurl1(selectStudent.getMobno(), typeMessage,"CB"+cbNumber,conn,selectStudent.getSchid(),"");
			}
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void deniedStudent() throws IOException
	{
		Connection conn=DataBaseConnection.javaConnection();
		String id=selectStudent.getId();

		int i=new DatabaseMethods1().deniedStudentByEnqiry(id,conn);
		if(i>0)
		{
			list=new DatabaseMethods1().allStudent(selecttype,selectYear,conn);
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Student Denied successfully"));
			FacesContext.getCurrentInstance().getExternalContext().redirect("viewEnquiry.xhtml");
		}
		else
		{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("some Error occur Please try Again"));
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/*public String back()
	{
	return "dashboard.xhtml";
	}*/

	public ArrayList<StudentInfo1> getList() {
		return list;
	}
	public void setList(ArrayList<StudentInfo1> list) {
		this.list = list;
	}
	public String getStudentName() {
		return studentName;
	}
	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getMobno() {
		return mobno;
	}
	public void setMobno(String mobno) {
		this.mobno = mobno;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getFatherName() {
		return fatherName;
	}
	public void setFatherName(String fatherName) {
		this.fatherName = fatherName;
	}
	public String getMotherName() {
		return motherName;
	}
	public void setMotherName(String motherName) {
		this.motherName = motherName;
	}
	public String getAdmissionNo() {
		return admissionNo;
	}
	public void setAdmissionNo(String admissionNo) {
		this.admissionNo = admissionNo;
	}
	public Date getDob() {
		return dob;
	}
	public void setDob(Date dob) {
		this.dob = dob;
	}
	public Date getAdmissionDate() {
		return admissionDate;
	}
	public void setAdmissionDate(Date admissionDate) {
		this.admissionDate = admissionDate;
	}
	public boolean isCheck() {
		return check;
	}
	public void setCheck(boolean check) {
		this.check = check;
	}
	public StudentInfo1 getSelectStudent() {
		return selectStudent;
	}
	public void setSelectStudent(StudentInfo1 selectStudent) {
		this.selectStudent = selectStudent;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public String getAddmissionNumber() {
		return addmissionNumber;
	}

	public void setAddmissionNumber(String addmissionNumber) {
		this.addmissionNumber = addmissionNumber;
	}

	public String getClassName1() {
		return className1;
	}

	public void setClassName1(String className1) {
		this.className1 = className1;
	}

	public String getSelectedSection() {
		return selectedSection;
	}

	public void setSelectedSection(String selectedSection) {
		this.selectedSection = selectedSection;
	}

	public String getRouteName1() {
		return routeName1;
	}

	public void setRouteName1(String routeName1) {
		this.routeName1 = routeName1;
	}

	public String getRouteFees() {
		return routeFees;
	}

	public void setRouteFees(String routeFees) {
		this.routeFees = routeFees;
	}

	public String getDiscountFee() {
		return discountFee;
	}

	public void setDiscountFee(String discountFee) {
		this.discountFee = discountFee;
	}

	public String getTotalFees() {
		return totalFees;
	}

	public void setTotalFees(String totalFees) {
		this.totalFees = totalFees;
	}

	public Date getAddmissionDate() {
		return addmissionDate;
	}

	public void setAddmissionDate(Date addmissionDate) {
		this.addmissionDate = addmissionDate;
	}

	public ArrayList<SelectItem> getSectionList() {
		return sectionList;
	}

	public void setSectionList(ArrayList<SelectItem> sectionList) {
		this.sectionList = sectionList;
	}

	public ArrayList<SelectItem> getClassList() {
		return classList;
	}

	public void setClassList(ArrayList<SelectItem> classList) {
		this.classList = classList;
	}

	public ArrayList<SelectItem> getRouteList() {
		return routeList;
	}

	public void setRouteList(ArrayList<SelectItem> routeList) {
		this.routeList = routeList;
	}
	public ArrayList<StudentInfo1> getSelectedstudent() {
		return selectedstudent;
	}

	public void setSelectedstudent(ArrayList<StudentInfo1> selectedstudent) {
		this.selectedstudent = selectedstudent;
	}
	public String getSelectYear() {
		return selectYear;
	}

	public void setSelectYear(String selectYear) {
		this.selectYear = selectYear;
	}

	public ArrayList<SelectItem> getYearlist() {
		return yearlist;
	}

	public void setYearlist(ArrayList<SelectItem> yearlist) {
		this.yearlist = yearlist;
	}
	public String getTypemessage() {
		return typemessage;
	}

	public void setTypemessage(String typemessage) {
		this.typemessage = typemessage;
	}

	public String getSelecttype() {
		return selecttype;
	}

	public void setSelecttype(String selecttype) {
		this.selecttype = selecttype;
	}

	public Boolean getCheckaccpect() {
		return checkaccpect;
	}

	public void setCheckaccpect(Boolean checkaccpect) {
		this.checkaccpect = checkaccpect;
	}
	public String getPaymentMode() {
		return paymentMode;
	}
	public void setPaymentMode(String paymentMode) {
		this.paymentMode = paymentMode;
	}
	public double getFeeAmount() {
		return feeAmount;
	}
	public void setFeeAmount(double feeAmount) {
		this.feeAmount = feeAmount;
	}
	public String getRemark() {
		return remark;
	}
	public void setRemark(String remark) {
		this.remark = remark;
	}
	public String getRefNo() {
		return refNo;
	}
	public void setRefNo(String refNo) {
		this.refNo = refNo;
	}

	public String getSrnoType() {
		return srnoType;
	}

	public void setSrnoType(String srnoType) {
		this.srnoType = srnoType;
	}

	public String getSrnoPrefix() {
		return srnoPrefix;
	}

	public void setSrnoPrefix(String srnoPrefix) {
		this.srnoPrefix = srnoPrefix;
	}

	public String getSrnoStart() {
		return srnoStart;
	}

	public void setSrnoStart(String srnoStart) {
		this.srnoStart = srnoStart;
	}

	public boolean isDisableSrNo() {
		return disableSrNo;
	}

	public void setDisableSrNo(boolean disableSrNo) {
		this.disableSrNo = disableSrNo;
	}

	public SchoolInfoList getInfo() {
		return info;
	}

	public void setInfo(SchoolInfoList info) {
		this.info = info;
	}

	public ArrayList<FeeInfo> getAdmFeeList() {
		return admFeeList;
	}

	public void setAdmFeeList(ArrayList<FeeInfo> admFeeList) {
		this.admFeeList = admFeeList;
	}

	public String getSchoolid() {
		return schoolid;
	}

	public void setSchoolid(String schoolid) {
		this.schoolid = schoolid;
	}

	public ArrayList<SelectItem> getBranchList() {
		return branchList;
	}

	public void setBranchList(ArrayList<SelectItem> branchList) {
		this.branchList = branchList;
	}

	public double getDiscountAmount() {
		return discountAmount;
	}

	public void setDiscountAmount(double discountAmount) {
		this.discountAmount = discountAmount;
	}

	public Date getChequeDate() {
		return chequeDate;
	}

	public void setChequeDate(Date chequeDate) {
		this.chequeDate = chequeDate;
	}

	public String getChequeNo() {
		return chequeNo;
	}

	public void setChequeNo(String chequeNo) {
		this.chequeNo = chequeNo;
	}

	public boolean isChequeShow() {
		return chequeShow;
	}

	public void setChequeShow(boolean chequeShow) {
		this.chequeShow = chequeShow;
	}

	public double getFeeAmountPro() {
		return feeAmountPro;
	}

	public void setFeeAmountPro(double feeAmountPro) {
		this.feeAmountPro = feeAmountPro;
	}

	public double getFeeAmountRegistration() {
		return feeAmountRegistration;
	}

	public void setFeeAmountRegistration(double feeAmountRegistration) {
		this.feeAmountRegistration = feeAmountRegistration;
	}

	public String getBalMsg() {
		return balMsg;
	}

	public void setBalMsg(String balMsg) {
		this.balMsg = balMsg;
	}

	public String getRegex() {
		return regex;
	}

	public void setRegex(String regex) {
		this.regex = regex;
	}
	

}
