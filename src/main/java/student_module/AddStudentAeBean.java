package student_module;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpSession;

import org.primefaces.PrimeFaces;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.file.UploadedFile;

import Json.DataBaseMeathodJson;
import exam_module.ExamInfo;
import schooldata.ClassTest;
import schooldata.DataBaseConnection;
import schooldata.DatabaseMethods1;
import schooldata.SchoolInfoList;

@ManagedBean(name="addStudentAe")
@ViewScoped

public class AddStudentAeBean implements Serializable
{
	ArrayList<SelectItem> classList,religionList,sessionList,nationalityList;
	boolean gdocReq,mReq,fdocReq,gReq,famBook,gimg;
	boolean showParentNew,showParentEx,disableRel,showSen;
	boolean gReqPpt,gReqEmid,fReqVisa,mReqVisa,stReqVisa;
	transient UploadedFile fatherImage,motherImage,studentImage,grImage,senImage;
	transient UploadedFile f_ppt,f_emid,f_visa,m_ppt,m_emid,m_visa,st_ppt,st_emid,st_visa,gr_ppt,gr_emid,gr_visa,birth_cert,vac_report,fam_book;
	OnlineAdmInfo info = new OnlineAdmInfo();
	LoginInfo linfo = new LoginInfo();
	DatabaseMethods1 DBM = new DatabaseMethods1();
	DataBaseOnlineAdm DBO = new DataBaseOnlineAdm();
	ArrayList<SiblingAEInfo> completeList=new ArrayList<>();
	SchoolInfoList ls=new SchoolInfoList();
	String enqid = "";
	String heading="";
	String subject = "";

	String srnoType,srnoPrefix,srnoStart,session,schid;
	boolean disableSrNo,check, showEmp, testStatus = false, examStatus = false;
	//Date addmissionDate = new Date();
	String addmissionNumber, className1, selectedSection,routeName1 = "", routeFees = "0", discountFee = "0",
			totalFees = "0",cbNumber,clsName;
	ArrayList<SelectItem> sectionList,connsessionList;
	ArrayList<String> documentsSubmitted = new ArrayList<>();
	ArrayList<ClassTest> classTestList;
	ArrayList<ExamInfo> examList;
	DataBaseOnlineAdm onlAdm = new DataBaseOnlineAdm();

	public AddStudentAeBean()
	{
		Connection conn = DataBaseConnection.javaConnection();
		ls = DBM.fullSchoolInfo(conn);
		
		schid=DBM.schoolId();
		session=DBM.selectedSessionDetails(schid, conn);
		srnoType = ls.getSrnoType();
		connsessionList = DBM.allConnsessionType(conn);

		disableRel=true;
		showParentNew=true;
		showParentEx=false;

		classList=DBM.allClass(conn);
		religionList=DBM.allReligionList(conn);
		nationalityList = DBM.allNationalityList(conn);

		completeList=new ArrayList<>();
		for(int k=1;k<=5;k++)
		{
			SiblingAEInfo ll=new SiblingAEInfo();
			ll.setSno(k);
			ll.setName("");
			ll.setClass_name("");
			ll.setClass_id("");
			completeList.add(ll);
		}

		if(srnoType.equalsIgnoreCase("manual"))
		{
			disableSrNo = false;
			addmissionNumber = "";
		}
		else
		{
			disableSrNo = true;
			boolean check = DBM.checkStudentsInSchool(ls.getSchid(),conn);
			if(check==false)
			{
				addmissionNumber = ls.getSrnoPrefix()+ls.getSrnoStart();
			}
			else
			{
				addmissionNumber = ls.getSrnoPrefix()+DBM.autoGeneratedSrNo(ls.getSchid(),(ls.getSrnoPrefix().length()+1),conn);
			}
		}
		try {
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void checkParent()
	{
		info.setParent_id("");
		info.setParent_pwd("");
		info.setApplicant_name("");
		disableRel=true;
		info.setOther_rel("");
		info.setF_name("");
		info.setF_mob("");
		info.setF_email("");
		info.setF_emid("");
		info.setM_name("");
		info.setM_mob("");
		info.setM_email("");
		info.setM_emid("");

		fatherImage=null;
		motherImage=null;

		if(info.getParent_type().equalsIgnoreCase("New Parents"))
		{
			showParentNew=true;
			showParentEx=false;
			info.setApplicant_relation("Father");
		}
		else
		{
			showParentNew=false;
			showParentEx=true;
			info.setApplicant_relation("");
		}
	}

	public void checkRel()
	{
		info.setOther_rel("");
		if(info.getApplicant_relation().equalsIgnoreCase("Other"))
		{
			disableRel=false;
		}
		else
		{
			disableRel=true;
			if(info.getApplicant_relation().equalsIgnoreCase("Legal Guardian"))
			{
				gReq=true;
				/*if(info.getG_image().equals(""))
				{
					gimg=true;
				}
				else
				{
					gimg=false;
				}

				if(info.getDocinfo().getG_ppt().equals(""))
				{
					gReqPpt=true;
				}
				else
				{
					gReqPpt=false;
				}

				if(info.getDocinfo().getG_emid().equals(""))
				{
					gReqEmid=true;
				}
				else
				{
					gReqEmid=false;
				}*/
			}
			else
			{
				gReq=false;
				//gimg=false;
			}
		}
	}

	public void checkGnation()
	{
		if(info.getG_nation().equalsIgnoreCase("UNITED ARAB EMIRATES"))
		{
			gdocReq=false;
		}
		else
		{
			if(!info.getG_name().equals("") || !info.getG_address().equals("") || !info.getG_email().equals("") ||
					!info.getG_emid().equals("") || !info.getG_employer().equals("") || !info.getG_mob().equals("") ||
					!info.getG_nation().equals("") || !info.getG_occupation().equals("") || !info.getG_rel().equals("") ||
					!info.getG_work().equals(""))
			{
				if(info.getDocinfo().getG_visa().equals(""))
				{
					gdocReq=true;
				}
				else
				{
					gdocReq=false;
				}
			}
			else
			{
				gdocReq=false;
			}
			//gdocReq=true;

		}
	}

	public void checkSen()
	{
		if(info.getSen().equalsIgnoreCase("Yes"))
		{
			showSen=true;
		}
		else
		{
			showSen=false;
		}
	}

	public void viewFile(String link)
	{
		PrimeFaces.current().executeInitScript("window.open('"+link+"')");
	}

	public void allSections()
	{
		Connection conn=DataBaseConnection.javaConnection();
		sectionList=DBM.allSection(info.getClassid(),conn);
		selectedSection=(String) sectionList.get(0).getValue();

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void submit()
	{
		if (info.getSt_image() == null || info.getSt_image().equalsIgnoreCase(""))
		{
			FacesContext fc=FacesContext.getCurrentInstance();
			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Please Upload Child's Photo.","Please Upload Child's Photo."));
		}
		else
		{
			Connection conn=DataBaseConnection.javaConnection();
			try
			{
				if(info.getParent_type().equalsIgnoreCase("Existing Parents"))
				{
					onlAdm.parentDetailByParentId(info, conn);
					if(info.getOnline_admcol().equalsIgnoreCase("found"))
					{
						accept();
					}
					else
					{
						FacesContext fc=FacesContext.getCurrentInstance();
						fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Sorry! No such Parent ID Exists. Please Try Again With Correct Details.","Sorry! No such Parent ID Exists. Please Try Again With Correct Details."));
					}
				}
				else
				{
					accept();
				}
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
			finally {

				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public void accept()
	{
		Connection conn=DataBaseConnection.javaConnection();

		int agreement = DBM.checkAgreementFor(schid, conn);
		int currentStrength = Integer.parseInt(DBM.allStudentcount(schid,"", "",session,"",conn));

		if(agreement<500)
		{
			if(currentStrength>=(agreement+25))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
			}
			else
			{
				reg();
			}
		}
		else
		{
			if(currentStrength>=(agreement+50))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
			}
			else
			{
				reg();
			}
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void reg()
	{
		Connection conn = DataBaseConnection.javaConnection();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyyy");



		SchoolInfoList ls = DBM.fullSchoolInfo(conn);
		String studentstatus = "new";

		boolean check = true;
		if (studentstatus.equalsIgnoreCase("New")) {
			String[] sesion = (DBM.selectedSessionDetails(schid,conn)).split("-");

			Date startdate = null;
			Date endDate = null;
			try {
				if (ls.getSchoolSession().equals("4-3")) {
					startdate = sdf.parse("31/03/" + sesion[0]);
					endDate = sdf.parse("01/04/" + sesion[1]);
				} else {
					startdate = sdf.parse("30/04/" + sesion[0]);
					endDate = sdf.parse("01/05/" + sesion[1]);
				}

			} catch (Exception e) {
				
				e.printStackTrace();
			}

			if (info.getApply_date().after(startdate) && info.getApply_date().before(endDate)) {
				check = true;
			} else {
				check = false;
			}

		}

		if (check == true)
		{
			addStudent();
		}
		else
		{
			FacesContext fc = FacesContext.getCurrentInstance();
			fc.addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "If Student New Please Date Must Be In This Session",
							"If Student New Please Date Must Be In This Session "));
		}

		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public void addStudent()
	{
		Connection conn=DataBaseConnection.javaConnection();
		FacesContext fc=FacesContext.getCurrentInstance();
		//uploadDoc();

		info.setYear(DBM.selectedSessionDetails(schid,conn));
		info.setLogin_id("SCHOOLADM-"+addmissionNumber);
		int enq_id = DBO.insertAdmInfo(info,"Admission Accepted",conn);
		if(enq_id>=1)
		{
			enqid = String.valueOf(enq_id);

			DBO.insertDocInfo(info.getDocinfo(),info.getLogin_id(), enq_id, info.getStudent_id(),conn);
			DBO.insertMedicalInfo(info.getMedinfo(),info.getLogin_id(), enq_id, info.getStudent_id(),conn);
			DBO.insertVaccineInfo(info.getVacinfo(),info.getLogin_id(), enq_id, info.getStudent_id(), conn);
			DBO.insertSiblingInfo(completeList,String.valueOf(enq_id),info.getLogin_id(),info.getStudent_id(), conn);

			reg2();

			/*disableRel=true;
        		showParentNew=true;
        		showParentEx=false;

        		completeList=new ArrayList<>();
        		for(int k=1;k<=5;k++)
        		{
        			SiblingAEInfo ll=new SiblingAEInfo();
        			ll.setSno(k);
        			ll.setName("");
        			ll.setClass_name("");
        			ll.setClass_id("");
        			completeList.add(ll);
        		}

            	fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Your Application Sent Successfully!","Your Application Sent Successfully!"));

            	LoginInfo ll= DBO.signUpInfo(info.getLogin_id(), conn);
        		String schnm = DBM.schoolNameById(DBM.schoolId(), conn);
        		String subject = schnm+" Registration Application Submitted!";
        		String heading = "<center>Hello "+info.getSt_name()+",</center>" + "<center class=\"red\">Congratulations, your registration application in  "+schnm+" has been submitted successfully!<center>";
        		String msg = "<center><strong>Please login to your account, go to 'My Applications' under 'For Applicant' section, to check your registration application and its status.</strong><br></br>"+"<a href=\"http://chalkboxerp.in/DM/onlineAdmLogin.xhtml\"> <img style=\"height: 44px;\" src=\"http://chalkboxerp.in/loginNowButton.png\"> </a> <br></br></center>";

        		Runnable r = new Runnable()
        		{
        			public void run()
        			{

        				new DataBaseOnlineAdm().doMail(ll.getEmail(), subject, heading, msg);
        			}

        		};
        		new Thread(r).start();*/

		}
		else
		{

			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Something Went Wrong. Please Try Again With Correct Details!","Something Went Wrong. Please Try Again With Correct Details!"));
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public void reg2()
	{
		Connection conn = DataBaseConnection.javaConnection();
		new SimpleDateFormat("dd/MM/yyyyy");



		SchoolInfoList ls = DBM.fullSchoolInfo(conn);
		String concession = (String) connsessionList.get(0).getValue();
		String studentstatus = "New";

		srnoType = ls.getSrnoType();

		if(srnoType.equalsIgnoreCase("auto"))
		{
			boolean checkStu = DBM.checkStudentsInSchool(ls.getSchid(),conn);
			if(checkStu==false)
			{
				addmissionNumber = ls.getSrnoPrefix()+ls.getSrnoStart();
			}
			else
			{
				addmissionNumber = ls.getSrnoPrefix()+DBM.autoGeneratedSrNo(ls.getSchid(),(ls.getSrnoPrefix().length()+1),conn);
			}
		}

		int index1=info.getSt_image().lastIndexOf("/")+1;
		String studentImage=info.getSt_image().substring(index1);

		int index2=info.getF_image().lastIndexOf("/")+1;
		String fatherImage=info.getF_image().substring(index2);

		int index3=info.getM_image().lastIndexOf("/")+1;
		String motherImage=info.getM_image().substring(index3);

		int index4=info.getG_image().lastIndexOf("/")+1;
		String g1Image=info.getG_image().substring(index4);

		String g2Image="";

		int i = DBO.studentRegistrationSession(info.getYear(), "", info.getApply_date(), info.getSt_name(),
				info.getDob(), selectedSection, info.getEmid(), Long.valueOf(info.getF_mob()),
				info.getAddress(), info.getAddress(), info.getGender(), info.getNationality(),
				info.getReligion(), "", "", "", 0, "", "", "", info.getNationality(), info.getF_name(),
				info.getM_name(), info.getF_email(), info.getF_emid(), info.getM_emid(),
				Long.valueOf(info.getM_mob()), "", "", info.getLast_school(), "", "", "", "", "", "", "", "", "",
				info.getG_name(), info.getG_rel(), info.getG_occupation(), info.getG_mob(),
				info.getG_address(), "", "", "", "", "", "", info.getF_occupation(), "", "No", "",
				info.getM_occupation(), "", "No", "", concession, "", "", "", "", "", "", documentsSubmitted,
				studentImage, fatherImage, motherImage, g1Image, g2Image, info.getM_email(),
				info.getMedinfo().getBlood_group(), "", "", studentstatus, "", discountFee, "", "", conn, "0",
				addmissionNumber, "accepted", enqid,className1);

		if (i >= 1) {
			int maxnumber = i;
			cbNumber = String.valueOf(maxnumber);
			DBM.updateStudentId("CB" + String.valueOf(maxnumber), i, conn);
			DBO.transportDataEntryAe(info.getApply_date(), "CB" + String.valueOf(maxnumber), routeName1, "No", className1,conn,DatabaseMethods1.selectedSessionDetails(DBM.schoolId(),conn));
			/*if (routeName1.equals("")) {
				DBM.transportDataEntry(addmissionDate, "CB" + String.valueOf(maxnumber), routeName1, "No", conn);
			} else {
				DBM.transportDataEntry(addmissionDate, "CB" + String.valueOf(maxnumber), routeName1, "Yes", conn);
			}*/

			//			FacesContext fc = FacesContext.getCurrentInstance();
			//			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Student Added Successfully",
			//					"Student Added Successfully"));

			new DataBaseMeathodJson().addclassAttendanceINNew(selectedSection,new Date(),schid,conn);
			DBM.addUserName("CB"+cbNumber, "CB"+cbNumber, "student", conn, Long.valueOf(info.getF_mob()), "both");

			DBM.increaseStudentInAddSchool(schid,conn);
			String className = DBM.classNameFromidSchid(schid,className1, DBM.selectedSessionDetails(schid,conn), conn);
			classTestList = DBO.selectedClassTestListSession(DBM.selectedSessionDetails(schid,conn),className1, selectedSection, conn);
			examList = DBO.selectedClassExamListSession(DBM.selectedSessionDetails(schid,conn),selectedSection, conn);
			clsName = className;

			for (ClassTest ct : classTestList) {
				testStatus = DBO.checkClassTestPerformanceStatusSession(DBM.selectedSessionDetails(schid,conn),ct.getId(), conn);
				if (testStatus == true) {
					DBO.entryOfNewStudentInClassTestPerformanceSession(schid,DBM.selectedSessionDetails(schid,conn),"CB" + String.valueOf(maxnumber), ct.getId(), conn);
				} else {

				}
			}
			for (ExamInfo ee : examList) {
				DBO.entryOfNewStudentInExamPerformanceSession(DBM.schoolId(),DatabaseMethods1.selectedSessionDetails(DBM.schoolId(),conn),"CB" + String.valueOf(maxnumber), ee.getClassid(),
						ee.getSubjectid(), ee.getSemesterid(), ee.getExamid(), ee.getExamType(), conn, ee.getMaxMark(), ee.getExamName());
			}


			//String id = selectedEnquiry.getId();
			//DBM.acceptEnquiry(id, selectedEnquiry.getEnquiryId(),userId, conn);
			//search();

			HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
			ss.setAttribute("addNo", "CB" + String.valueOf(maxnumber));
			ss.setAttribute("name", info.getSt_name());
			ss.setAttribute("selectedClass", selectedSection);

			updateAeTables();

		}
		try {
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void updateAeTables()
	{
		Connection conn = DataBaseConnection.javaConnection();
		String studentId = "CB"+cbNumber;
		//String id = selected.getId();

		//DBO.updateAdmStatus("Admission Accepted", "Admission Accepted", enqid, conn);
		//DBO.updateAdmRemark(remark, selected.getId(), conn);

		DBO.updateAEStudentId("online_adm", "student_id", studentId, "id", enqid, conn);
		DBO.updateAEStudentId("document_ae", "student_id", studentId, "enq_id", enqid, conn);
		DBO.updateAEStudentId("medical_ae", "student_id", studentId, "enq_id", enqid, conn);
		DBO.updateAEStudentId("sibling_ae", "student_id", studentId, "enq_id", enqid, conn);
		DBO.updateAEStudentId("vaccination_ae", "student_id", studentId, "enq_id", enqid, conn);

		// Update Student ID in AE Tables

		PrimeFaces.current().ajax().update("confirmForm");
		PrimeFaces.current().executeInitScript("PF('enqDlg').show()");

		HttpSession ss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		String regmail=(String) ss.getAttribute("registration");
		
		if(regmail.equals("true"))
		{
			String schnm = DBM.schoolNameById(schid, conn);
			String msg = "<center>"+"Your Parent Portal Login Id : <strong>"+studentId+"</strong><br></br>"+"Password : <strong>"+studentId+"</strong><br></br>"+"<a href=\"http://chalkboxerp.in/DM/ChalkboxLogin.xhtml\"> <img style=\"height: 44px;\" src=\"http://chalkboxerp.in/loginNowButton.png\"> </a> <br></br></center>";
			String heading = "<center>Hello "+info.getSt_name()+",</center>" + "<center class=\"red\">Congratulations, your admission in "+schnm+" has been accepted!</center>";
			String subject = schnm + " Admission Accepted!";

			Runnable r = new Runnable()
			{
				public void run()
				{
					if(info.getReceipient().equalsIgnoreCase("Father"))
					{
						onlAdm.doMail(info.getF_email(), subject, heading, msg);
					}
					else if(info.getReceipient().equalsIgnoreCase("Mother"))
					{
						onlAdm.doMail(info.getM_email(), subject, heading, msg);
					}
					else if(info.getReceipient().equalsIgnoreCase("Both"))
					{
						onlAdm.doMail(info.getF_email(), subject, heading, msg);
						onlAdm.doMail(info.getM_email(), subject, heading, msg);
					}

				}

			};
			new Thread(r).start();
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	/*public void uploadDoc()
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		ls=DBM.fullSchoolInfo(conn);
		if (studentImage != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=fatherImage.getFileName().split("\\.");
			fnm = "new_student_profile_"+dd+"."+exten[exten.length-1];
			info.setSt_image(ls.getDownloadpath()+fnm);
			DBM.makeProfile(studentImage, fnm, conn);
		}

		if (fatherImage != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=fatherImage.getFileName().split("\\.");
			fnm = "new_father_profile_"+dd+"."+exten[exten.length-1];
			info.setF_image(ls.getDownloadpath()+fnm);
			DBM.makeProfile(fatherImage, fnm, conn);
		}

		if (motherImage != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=motherImage.getFileName().split("\\.");
			fnm = "new_mother_profile_"+dd+"."+exten[exten.length-1];
			info.setM_image(ls.getDownloadpath()+fnm);
			DBM.makeProfile(motherImage, fnm, conn);
		}

		if (grImage != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=grImage.getFileName().split("\\.");
			fnm = "new_guardian_profile_"+dd+"."+exten[exten.length-1];
			info.setG_image(ls.getDownloadpath()+fnm);
			DBM.makeProfile(grImage, fnm, conn);
		}

		if (senImage != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=senImage.getFileName().split("\\.");
			fnm = "new_sen_profile_"+dd+"."+exten[exten.length-1];
			info.setSen_file(ls.getDownloadpath()+fnm);
			DBM.makeProfile(senImage, fnm, conn);
		}
		//////
		if (f_ppt != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=f_ppt.getFileName().split("\\.");
			fnm = "new_father_ppt_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setParent_ppt(ls.getDownloadpath()+fnm);
			DBM.makeProfile(f_ppt, fnm, conn);
		}

		if (f_emid != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=f_emid.getFileName().split("\\.");
			fnm = "new_father_emid_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setParent_emid(ls.getDownloadpath()+fnm);
			DBM.makeProfile(f_emid, fnm, conn);
		}

		if (f_visa != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=f_visa.getFileName().split("\\.");
			fnm = "new_father_visa_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setParent_visa(ls.getDownloadpath()+fnm);
			DBM.makeProfile(f_visa, fnm, conn);
		}
	//////
		if (m_ppt != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=m_ppt.getFileName().split("\\.");
			fnm = "new_mother_ppt_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setMother_ppt(ls.getDownloadpath()+fnm);
			DBM.makeProfile(m_ppt, fnm, conn);
		}

		if (m_emid != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=m_emid.getFileName().split("\\.");
			fnm = "new_mother_emid_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setMother_emid(ls.getDownloadpath()+fnm);
			DBM.makeProfile(m_emid, fnm, conn);
		}

		if (m_visa != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=m_visa.getFileName().split("\\.");
			fnm = "new_mother_visa_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setMother_visa(ls.getDownloadpath()+fnm);
			DBM.makeProfile(m_visa, fnm, conn);
		}
		//////
		if (st_ppt != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=st_ppt.getFileName().split("\\.");
			fnm = "new_student_ppt_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setStudent_ppt(ls.getDownloadpath()+fnm);
			DBM.makeProfile(st_ppt, fnm, conn);
		}

		if (st_emid != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=st_emid.getFileName().split("\\.");
			fnm = "new_student_emid_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setStudent_emid(ls.getDownloadpath()+fnm);
			DBM.makeProfile(st_emid, fnm, conn);
		}

		if (st_visa != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=st_visa.getFileName().split("\\.");
			fnm = "new_student_visa_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setStudent_visa(ls.getDownloadpath()+fnm);
			DBM.makeProfile(st_visa, fnm, conn);
		}
	//////
		if (gr_ppt != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=gr_ppt.getFileName().split("\\.");
			fnm = "new_guardian_ppt_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setG_ppt(ls.getDownloadpath()+fnm);
			DBM.makeProfile(gr_ppt, fnm, conn);
		}

		if (gr_emid != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=gr_emid.getFileName().split("\\.");
			fnm = "new_guardian_emid_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setG_emid(ls.getDownloadpath()+fnm);
			DBM.makeProfile(gr_emid, fnm, conn);
		}

		if (gr_visa != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=gr_visa.getFileName().split("\\.");
			fnm = "new_guardian_visa_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setG_visa(ls.getDownloadpath()+fnm);
			DBM.makeProfile(gr_visa, fnm, conn);
		}
	//////
		if (birth_cert != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=birth_cert.getFileName().split("\\.");
			fnm = "new_st_birthCert_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setBirth_cert(ls.getDownloadpath()+fnm);
			DBM.makeProfile(birth_cert, fnm, conn);
		}

		if (vac_report != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=vac_report.getFileName().split("\\.");
			fnm = "new_st_vaccReport_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setVaccination(ls.getDownloadpath()+fnm);
			DBM.makeProfile(vac_report, fnm, conn);
		}

		if (fam_book != null)
		{
			dd = new SimpleDateFormat("yMdHms").format(new Date());
			rendomNumber=(int)(Math.random()*9000)+1000;
			dd = dd+rendomNumber;
			String exten[]=fam_book.getFileName().split("\\.");
			fnm = "new_st_familyBook_profile_"+dd+"."+exten[exten.length-1];
			info.getDocinfo().setFamily_book(ls.getDownloadpath()+fnm);
			DBM.makeProfile(fam_book, fnm, conn);
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}*/

	public void studentUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_student_profile_"+dd+"."+exten[exten.length-1];
		info.setSt_image(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void fatherUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_father_profile_"+dd+"."+exten[exten.length-1];
		info.setF_image(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void motherUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_mother_profile_"+dd+"."+exten[exten.length-1];
		info.setM_image(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void grUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_guardian_profile_"+dd+"."+exten[exten.length-1];
		info.setG_image(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void senUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_sen_profile_"+dd+"."+exten[exten.length-1];
		info.setSen_file(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void fpptUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_father_ppt_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setParent_ppt(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void fvisaUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_father_visa_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setParent_visa(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void femidUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_father_emid_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setParent_emid(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void mpptUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_mother_ppt_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setMother_ppt(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void mvisaUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_mother_visa_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setMother_visa(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void memidUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_mother_emid_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setMother_emid(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void stpptUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_student_ppt_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setStudent_ppt(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void stvisaUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_student_visa_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setStudent_visa(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void stemidUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_student_emid_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setStudent_emid(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void grpptUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_guardian_ppt_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setG_ppt(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void grvisaUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_guardian_visa_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setG_visa(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void gremidUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_guardian_emid_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setG_emid(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void birthUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_st_birthCert_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setBirth_cert(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void vaccrepUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_st_vaccReport_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setVaccination(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void fambookUpload(FileUploadEvent event)
	{
		Connection conn = DataBaseConnection.javaConnection();
		String dd="",fnm="";
		int rendomNumber =0 ;
		dd = new SimpleDateFormat("yMdHms").format(new Date());
		rendomNumber=(int)(Math.random()*9000)+1000;
		dd = dd+rendomNumber;
		String exten[]=event.getFile().getFileName().split("\\.");
		fnm = "new_st_familyBook_profile_"+dd+"."+exten[exten.length-1];
		info.getDocinfo().setFamily_book(ls.getDownloadpath()+fnm);
		DBM.makeProfileSchid(schid,event.getFile(), fnm, conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public ArrayList<SelectItem> getClassList() {
		return classList;
	}

	public void setClassList(ArrayList<SelectItem> classList) {
		this.classList = classList;
	}

	public ArrayList<SelectItem> getReligionList() {
		return religionList;
	}

	public void setReligionList(ArrayList<SelectItem> religionList) {
		this.religionList = religionList;
	}

	public ArrayList<SelectItem> getSessionList() {
		return sessionList;
	}

	public void setSessionList(ArrayList<SelectItem> sessionList) {
		this.sessionList = sessionList;
	}

	public ArrayList<SelectItem> getNationalityList() {
		return nationalityList;
	}

	public void setNationalityList(ArrayList<SelectItem> nationalityList) {
		this.nationalityList = nationalityList;
	}

	public boolean isGdocReq() {
		return gdocReq;
	}

	public void setGdocReq(boolean gdocReq) {
		this.gdocReq = gdocReq;
	}

	public boolean ismReq() {
		return mReq;
	}

	public void setmReq(boolean mReq) {
		this.mReq = mReq;
	}

	public boolean isFdocReq() {
		return fdocReq;
	}

	public void setFdocReq(boolean fdocReq) {
		this.fdocReq = fdocReq;
	}

	public boolean isgReq() {
		return gReq;
	}

	public void setgReq(boolean gReq) {
		this.gReq = gReq;
	}

	public boolean isFamBook() {
		return famBook;
	}

	public void setFamBook(boolean famBook) {
		this.famBook = famBook;
	}

	public boolean isGimg() {
		return gimg;
	}

	public void setGimg(boolean gimg) {
		this.gimg = gimg;
	}

	public boolean isShowParentNew() {
		return showParentNew;
	}

	public void setShowParentNew(boolean showParentNew) {
		this.showParentNew = showParentNew;
	}

	public boolean isShowParentEx() {
		return showParentEx;
	}

	public void setShowParentEx(boolean showParentEx) {
		this.showParentEx = showParentEx;
	}

	public boolean isDisableRel() {
		return disableRel;
	}

	public void setDisableRel(boolean disableRel) {
		this.disableRel = disableRel;
	}

	public boolean isShowSen() {
		return showSen;
	}

	public void setShowSen(boolean showSen) {
		this.showSen = showSen;
	}

	public boolean isgReqPpt() {
		return gReqPpt;
	}

	public void setgReqPpt(boolean gReqPpt) {
		this.gReqPpt = gReqPpt;
	}

	public boolean isgReqEmid() {
		return gReqEmid;
	}

	public void setgReqEmid(boolean gReqEmid) {
		this.gReqEmid = gReqEmid;
	}

	public boolean isfReqVisa() {
		return fReqVisa;
	}

	public void setfReqVisa(boolean fReqVisa) {
		this.fReqVisa = fReqVisa;
	}

	public boolean ismReqVisa() {
		return mReqVisa;
	}

	public void setmReqVisa(boolean mReqVisa) {
		this.mReqVisa = mReqVisa;
	}

	public boolean isStReqVisa() {
		return stReqVisa;
	}

	public void setStReqVisa(boolean stReqVisa) {
		this.stReqVisa = stReqVisa;
	}

	public UploadedFile getFatherImage() {
		return fatherImage;
	}

	public void setFatherImage(UploadedFile fatherImage) {
		this.fatherImage = fatherImage;
	}

	public UploadedFile getMotherImage() {
		return motherImage;
	}

	public void setMotherImage(UploadedFile motherImage) {
		this.motherImage = motherImage;
	}

	public UploadedFile getStudentImage() {
		return studentImage;
	}

	public void setStudentImage(UploadedFile studentImage) {
		this.studentImage = studentImage;
	}

	public UploadedFile getGrImage() {
		return grImage;
	}

	public void setGrImage(UploadedFile grImage) {
		this.grImage = grImage;
	}

	public UploadedFile getSenImage() {
		return senImage;
	}

	public void setSenImage(UploadedFile senImage) {
		this.senImage = senImage;
	}

	public UploadedFile getF_ppt() {
		return f_ppt;
	}

	public void setF_ppt(UploadedFile f_ppt) {
		this.f_ppt = f_ppt;
	}

	public UploadedFile getF_emid() {
		return f_emid;
	}

	public void setF_emid(UploadedFile f_emid) {
		this.f_emid = f_emid;
	}

	public UploadedFile getF_visa() {
		return f_visa;
	}

	public void setF_visa(UploadedFile f_visa) {
		this.f_visa = f_visa;
	}

	public UploadedFile getM_ppt() {
		return m_ppt;
	}

	public void setM_ppt(UploadedFile m_ppt) {
		this.m_ppt = m_ppt;
	}

	public UploadedFile getM_emid() {
		return m_emid;
	}

	public void setM_emid(UploadedFile m_emid) {
		this.m_emid = m_emid;
	}

	public UploadedFile getM_visa() {
		return m_visa;
	}

	public void setM_visa(UploadedFile m_visa) {
		this.m_visa = m_visa;
	}

	public UploadedFile getSt_ppt() {
		return st_ppt;
	}

	public void setSt_ppt(UploadedFile st_ppt) {
		this.st_ppt = st_ppt;
	}

	public UploadedFile getSt_emid() {
		return st_emid;
	}

	public void setSt_emid(UploadedFile st_emid) {
		this.st_emid = st_emid;
	}

	public UploadedFile getSt_visa() {
		return st_visa;
	}

	public void setSt_visa(UploadedFile st_visa) {
		this.st_visa = st_visa;
	}

	public UploadedFile getGr_ppt() {
		return gr_ppt;
	}

	public void setGr_ppt(UploadedFile gr_ppt) {
		this.gr_ppt = gr_ppt;
	}

	public UploadedFile getGr_emid() {
		return gr_emid;
	}

	public void setGr_emid(UploadedFile gr_emid) {
		this.gr_emid = gr_emid;
	}

	public UploadedFile getGr_visa() {
		return gr_visa;
	}

	public void setGr_visa(UploadedFile gr_visa) {
		this.gr_visa = gr_visa;
	}

	public UploadedFile getBirth_cert() {
		return birth_cert;
	}

	public void setBirth_cert(UploadedFile birth_cert) {
		this.birth_cert = birth_cert;
	}

	public UploadedFile getVac_report() {
		return vac_report;
	}

	public void setVac_report(UploadedFile vac_report) {
		this.vac_report = vac_report;
	}

	public UploadedFile getFam_book() {
		return fam_book;
	}

	public void setFam_book(UploadedFile fam_book) {
		this.fam_book = fam_book;
	}

	public OnlineAdmInfo getInfo() {
		return info;
	}

	public void setInfo(OnlineAdmInfo info) {
		this.info = info;
	}

	public ArrayList<SiblingAEInfo> getCompleteList() {
		return completeList;
	}

	public void setCompleteList(ArrayList<SiblingAEInfo> completeList) {
		this.completeList = completeList;
	}

	public SchoolInfoList getLs() {
		return ls;
	}

	public void setLs(SchoolInfoList ls) {
		this.ls = ls;
	}

	public String getEnqid() {
		return enqid;
	}

	public void setEnqid(String enqid) {
		this.enqid = enqid;
	}

	public String getHeading() {
		return heading;
	}

	public void setHeading(String heading) {
		this.heading = heading;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public String getSrnoType() {
		return srnoType;
	}

	public void setSrnoType(String srnoType) {
		this.srnoType = srnoType;
	}

	public String getSrnoPrefix() {
		return srnoPrefix;
	}

	public void setSrnoPrefix(String srnoPrefix) {
		this.srnoPrefix = srnoPrefix;
	}

	public String getSrnoStart() {
		return srnoStart;
	}

	public void setSrnoStart(String srnoStart) {
		this.srnoStart = srnoStart;
	}

	public boolean isDisableSrNo() {
		return disableSrNo;
	}

	public void setDisableSrNo(boolean disableSrNo) {
		this.disableSrNo = disableSrNo;
	}

	public boolean isCheck() {
		return check;
	}

	public void setCheck(boolean check) {
		this.check = check;
	}

	public boolean isShowEmp() {
		return showEmp;
	}

	public void setShowEmp(boolean showEmp) {
		this.showEmp = showEmp;
	}

	public boolean isTestStatus() {
		return testStatus;
	}

	public void setTestStatus(boolean testStatus) {
		this.testStatus = testStatus;
	}

	public boolean isExamStatus() {
		return examStatus;
	}

	public void setExamStatus(boolean examStatus) {
		this.examStatus = examStatus;
	}
	/*
	public Date getAddmissionDate() {
		return addmissionDate;
	}

	public void setAddmissionDate(Date addmissionDate) {
		this.addmissionDate = addmissionDate;
	}*/

	public String getAddmissionNumber() {
		return addmissionNumber;
	}

	public void setAddmissionNumber(String addmissionNumber) {
		this.addmissionNumber = addmissionNumber;
	}

	public String getClassName1() {
		return className1;
	}

	public void setClassName1(String className1) {
		this.className1 = className1;
	}

	public String getSelectedSection() {
		return selectedSection;
	}

	public void setSelectedSection(String selectedSection) {
		this.selectedSection = selectedSection;
	}

	public String getRouteName1() {
		return routeName1;
	}

	public void setRouteName1(String routeName1) {
		this.routeName1 = routeName1;
	}

	public String getRouteFees() {
		return routeFees;
	}

	public void setRouteFees(String routeFees) {
		this.routeFees = routeFees;
	}

	public String getDiscountFee() {
		return discountFee;
	}

	public void setDiscountFee(String discountFee) {
		this.discountFee = discountFee;
	}

	public String getTotalFees() {
		return totalFees;
	}

	public void setTotalFees(String totalFees) {
		this.totalFees = totalFees;
	}

	public String getCbNumber() {
		return cbNumber;
	}

	public void setCbNumber(String cbNumber) {
		this.cbNumber = cbNumber;
	}

	public String getClsName() {
		return clsName;
	}

	public void setClsName(String clsName) {
		this.clsName = clsName;
	}

	public ArrayList<SelectItem> getSectionList() {
		return sectionList;
	}

	public void setSectionList(ArrayList<SelectItem> sectionList) {
		this.sectionList = sectionList;
	}

	public ArrayList<SelectItem> getConnsessionList() {
		return connsessionList;
	}

	public void setConnsessionList(ArrayList<SelectItem> connsessionList) {
		this.connsessionList = connsessionList;
	}

	public ArrayList<String> getDocumentsSubmitted() {
		return documentsSubmitted;
	}

	public void setDocumentsSubmitted(ArrayList<String> documentsSubmitted) {
		this.documentsSubmitted = documentsSubmitted;
	}

	public ArrayList<ClassTest> getClassTestList() {
		return classTestList;
	}

	public void setClassTestList(ArrayList<ClassTest> classTestList) {
		this.classTestList = classTestList;
	}

	public ArrayList<ExamInfo> getExamList() {
		return examList;
	}

	public void setExamList(ArrayList<ExamInfo> examList) {
		this.examList = examList;
	}
}
