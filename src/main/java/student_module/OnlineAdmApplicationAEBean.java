package student_module;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpSession;

import org.primefaces.PrimeFaces;

import Json.DataBaseMeathodJson;
import exam_module.ExamInfo;
import schooldata.ClassTest;
import schooldata.DataBaseConnection;
import schooldata.DatabaseMethods1;
import schooldata.SchoolInfoList;

@ManagedBean(name="onlineAdmApplicationAe")
@ViewScoped

public class OnlineAdmApplicationAEBean implements Serializable
{
	ArrayList<OnlineAdmInfo> list = new ArrayList<>();
	OnlineAdmInfo selected = new OnlineAdmInfo();
	OnlineAdmInfo selectedInfo = new OnlineAdmInfo();
	DatabaseMethods1 DBM = new DatabaseMethods1();
	DataBaseOnlineAdm DBO = new DataBaseOnlineAdm();
	LoginInfo linfo = new LoginInfo();
	String remark = "";

	String srnoType,srnoPrefix,srnoStart;
	boolean disableSrNo,check, showEmp, testStatus = false, examStatus = false;
	Date addmissionDate = new Date();
	String addmissionNumber, className1, selectedSection,routeName1 = "", routeFees = "0", discountFee = "0",
			totalFees = "0",cbNumber,clsName;
	ArrayList<SelectItem> sectionList, classList,connsessionList;
	ArrayList<String> documentsSubmitted = new ArrayList<>();
	ArrayList<ClassTest> classTestList;
	ArrayList<ExamInfo> examList;
	SchoolInfoList info;
	String session,schoolId;

	public OnlineAdmApplicationAEBean()
	{
		Connection conn=DataBaseConnection.javaConnection();
		schoolId = DBM.schoolId();
		session= DBM.selectedSessionDetails(schoolId,conn); 
		String unm = "all adm";
		list = DBO.myApplication(unm,"",conn);
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void viewDetail()
	{
		HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		ss.setAttribute("enq_id", selected.getId());
		if(selected.getStatus().equalsIgnoreCase("pending") ||
				selected.getStatus().equalsIgnoreCase("application accepted") ||
				selected.getStatus().equalsIgnoreCase("application rejected"))
		{
			ss.setAttribute("heading", "Registration Form");
			PrimeFaces.current().executeInitScript("window.open('viewRegApplication.xhtml')");
		}
		else
		{
			ss.setAttribute("heading", "Admission Form");
			PrimeFaces.current().executeInitScript("window.open('viewOnlineApplication.xhtml')");
		}

		/*try {

			FacesContext.getCurrentInstance().getExternalContext().redirect("viewOnlineApplication.xhtml");
		} catch (IOException e) {
			e.printStackTrace();
		}*/
	}

	public void detail()
	{
		Connection conn = DataBaseConnection.javaConnection();
		info = DBM.fullSchoolInfo(conn);

		srnoType = info.getSrnoType();
		connsessionList = DBM.allConnsessionType(conn);
		classList=DBO.allClassSession(selected.getYear(),conn);
		if(classList.size()>0)
		{
			selectedInfo = DBO.onlineAdmInfoById(selected.getId(), "id", conn);

			className1 = selected.getClassid();
			if(srnoType.equalsIgnoreCase("manual"))
			{
				disableSrNo = false;
				addmissionNumber = "";
			}
			else
			{
				disableSrNo = true;
				boolean check = DBM.checkStudentsInSchool(info.getSchid(),conn);
				if(check==false)
				{
					addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
				}
				else
				{
					addmissionNumber = info.getSrnoPrefix()+DBM.autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
				}
				//
			}
			sectionList = DBM.allSection(className1, conn);
			selectedSection = (String) sectionList.get(0).getValue();

			PrimeFaces.current().ajax().update("addForm");
			PrimeFaces.current().executeInitScript("PF('addDialog').show()");
		}
		else
		{
			FacesContext fc=FacesContext.getCurrentInstance();
			fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Please Setup Your Account first for Session "+selected.getYear()+".","Please Setup Your Account first for Session "+selected.getYear()+"."));

		}


		try {
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void accept()
	{
		Connection conn=DataBaseConnection.javaConnection();

		int agreement = DBM.checkAgreementFor(schoolId, conn);
		int currentStrength = Integer.parseInt(DBM.allStudentcount(schoolId, "","",selected.getYear(),"", conn));

		if(agreement<500)
		{
			if(currentStrength>=(agreement+25))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
			}
			else
			{
				addStudent();
			}
		}
		else
		{
			if(currentStrength>=(agreement+50))
			{
				FacesContext fc=FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration.","You have crossed your agreement limit, Please contact Chalkbox Administrator for new registration."));
			}
			else
			{
				addStudent();
			}
		}

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void reject()
	{
		Connection conn=DataBaseConnection.javaConnection();
		DBO.updateAdmStatus("Admission Form Rejected", "Admission Form Rejected", selected.getId(), conn);
		DBO.updateAdmRemark(remark, selected.getId(), conn);
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Admission Form Rejected Successfully!"));
		String unm = "all adm";
		list = DBO.myApplication(unm,"",conn);

		LoginInfo ll= DBO.signUpInfo(selected.getLogin_id(), conn);
		String schnm = DBM.schoolNameById(DBM.schoolId(), conn);
		String msg = "<center>"+remark+"<br></br>"+"<strong>You can check your admission form from your account. Please login to your account, go to 'My Applications' under 'For Applicant' section.</strong><br></br>"+"<a href=\"http://chalkboxerp.in/DM/onlineAdmLogin.xhtml\"> <img style=\"height: 44px;\" src=\"http://chalkboxerp.in/loginNowButton.png\"> </a> <br></br></center>";
		String heading = "<center>Hello "+selected.getSt_name()+",</center>" + "<center class=\"red\">Sorry, your admission form in  "+schnm+" has been rejected!</center>";
		String subject = schnm + " Admission Form Rejected!";

		Runnable r = new Runnable()
		{
			public void run()
			{

				new DataBaseOnlineAdm().doMail(ll.getEmail(), subject, heading, msg);
			}

		};
		new Thread(r).start();

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void review()
	{
		Connection conn=DataBaseConnection.javaConnection();
		DBO.updateAdmStatus("Review Admission Form", "Review Admission Form", selected.getId(), conn);
		DBO.updateAdmRemark(remark, selected.getId(), conn);
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Admission Form Revert to Applicant for Review!"));
		String unm = "all adm";
		list = DBO.myApplication(unm,"",conn);

		LoginInfo ll= DBO.signUpInfo(selected.getLogin_id(), conn);
		String schnm = DBM.schoolNameById(schoolId, conn);
		String msg = "<center>"+remark+"<br></br>"+"<strong>You can review your admission form from your account. Please login to your account, go to 'My Applications' under 'For Applicant' section.</strong><br></br>"+"<a href=\"http://chalkboxerp.in/DM/onlineAdmLogin.xhtml\"> <img style=\"height: 44px;\" src=\"http://chalkboxerp.in/loginNowButton.png\"> </a> <br></br></center>";
		String heading = "<center>Hello "+selected.getSt_name()+",</center>" + "<center class=\"red\">Your admission form in  "+schnm+" has some issues!</center>";
		String subject = schnm+" Review Admission Form!";

		Runnable r = new Runnable()
		{
			public void run()
			{

				new DataBaseOnlineAdm().doMail(ll.getEmail(), subject, heading, msg);
			}

		};
		new Thread(r).start();

		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void addStudent()
	{
		Connection conn = DataBaseConnection.javaConnection();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyyy");



		SchoolInfoList info = DBM.fullSchoolInfo(conn);
		String concession = (String) connsessionList.get(0).getValue();
		String studentstatus = "new";

		boolean check = true;
		if (studentstatus.equalsIgnoreCase("New")) {
			String[] sesion = (selected.getYear()).split("-");

			Date startdate = null;
			Date endDate = null;
			try {
				if (info.getSchoolSession().equals("4-3")) {
					startdate = sdf.parse("31/03/" + sesion[0]);
					endDate = sdf.parse("01/04/" + sesion[1]);
				} else {
					startdate = sdf.parse("30/04/" + sesion[0]);
					endDate = sdf.parse("01/05/" + sesion[1]);
				}

			} catch (Exception e) {
				
				e.printStackTrace();
			}

			if (addmissionDate.after(startdate) && addmissionDate.before(endDate)) {
				check = true;
			} else {
				check = false;
			}

		}

		if (check == true) {

			srnoType = info.getSrnoType();

			if(srnoType.equalsIgnoreCase("auto"))
			{
				boolean checkStu = DBM.checkStudentsInSchool(info.getSchid(),conn);
				if(checkStu==false)
				{
					addmissionNumber = info.getSrnoPrefix()+info.getSrnoStart();
				}
				else
				{
					addmissionNumber = info.getSrnoPrefix()+DBM.autoGeneratedSrNo(info.getSchid(),(info.getSrnoPrefix().length()+1),conn);
				}
			}

			int index1=selectedInfo.getSt_image().lastIndexOf("/")+1;
			String studentImage=selectedInfo.getSt_image().substring(index1);

			int index2=selectedInfo.getF_image().lastIndexOf("/")+1;
			String fatherImage=selectedInfo.getF_image().substring(index2);

			int index3=selectedInfo.getM_image().lastIndexOf("/")+1;
			String motherImage=selectedInfo.getM_image().substring(index3);

			int index4=selectedInfo.getG_image().lastIndexOf("/")+1;
			String g1Image=selectedInfo.getG_image().substring(index4);

			String g2Image="";

			int i = DBO.studentRegistrationSession(selectedInfo.getYear(), remark, addmissionDate, selectedInfo.getSt_name(),
					selectedInfo.getDob(), selectedSection, selectedInfo.getEmid(), Long.valueOf(selectedInfo.getF_mob()),
					selectedInfo.getAddress(), selectedInfo.getAddress(), selectedInfo.getGender(), selectedInfo.getNationality(),
					selectedInfo.getReligion(), "", "", "", 0, "", "", "", selectedInfo.getNationality(), selectedInfo.getF_name(),
					selectedInfo.getM_name(), selectedInfo.getF_email(), selectedInfo.getF_emid(), selectedInfo.getM_emid(),
					Long.valueOf(selectedInfo.getM_mob()), "", "", selectedInfo.getLast_school(), "", "", "", "", "", "", "", "", "",
					selectedInfo.getG_name(), selectedInfo.getG_rel(), selectedInfo.getG_occupation(), selectedInfo.getG_mob(),
					selectedInfo.getG_address(), "", "", "", "", "", "", selectedInfo.getF_occupation(), "", "No", "",
					selectedInfo.getM_occupation(), "", "No", "", concession, "", "", "", "", "", "", documentsSubmitted,
					studentImage, fatherImage, motherImage, g1Image, g2Image, selectedInfo.getM_email(),
					selectedInfo.getMedinfo().getBlood_group(), "", "", studentstatus, "", discountFee, "", "", conn, "0",
					addmissionNumber, "accepted", selected.getId(),className1);
			/*int i = DBM.studentRegistration(" ",addmissionDate, selectedEnquiry.getStudentName(), selectedEnquiry.getDob(),
					selectedSection, "", Long.valueOf(selectedEnquiry.getMobno()), selectedEnquiry.getAddress(),
					selectedEnquiry.getAddress(), selectedEnquiry.getGender(), "Indian", "", "", "", "", 0, "", "", "",
					"India", selectedEnquiry.getFatherName(), selectedEnquiry.getMotherName(), "", "", "",
					Long.valueOf(0), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
					"", "", "", "", "", "", "", "", "", routeName1, concession, "", "", "", "", "", "",
					documentsSubmitted, studentImage, fatherImage, motherImage, g1Image, g2Image, "", "", "", "",
					studentstatus, "", discountFee, "", "", conn, "", addmissionNumber,"accepted","temp");*/


			if (i >= 1) {
				int maxnumber = i;
				cbNumber = String.valueOf(maxnumber);
				DBM.updateStudentId("CB" + String.valueOf(maxnumber), i, conn);
				DBO.transportDataEntryAe(addmissionDate, "CB" + String.valueOf(maxnumber), routeName1, "No", className1,conn,selected.getYear());
				/*if (routeName1.equals("")) {
					DBM.transportDataEntry(addmissionDate, "CB" + String.valueOf(maxnumber), routeName1, "No", conn);
				} else {
					DBM.transportDataEntry(addmissionDate, "CB" + String.valueOf(maxnumber), routeName1, "Yes", conn);
				}*/

				FacesContext fc = FacesContext.getCurrentInstance();
				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Student Added Successfully",
						"Student Added Successfully"));

				if(selected.getYear().equals(DBM.selectedSessionDetails(schoolId,conn)))
				{
					new DataBaseMeathodJson().addclassAttendanceINNew(selectedSection,new Date(),schoolId,conn);
				}

				DBM.addUserName("CB"+cbNumber, "CB"+cbNumber, "student", conn, Long.valueOf(selectedInfo.getF_mob()), "both");


				DBM.increaseStudentInAddSchool(schoolId,conn);
				String className = DBM.classNameFromidSchid(schoolId,className1, selected.getYear(), conn);
				classTestList = DBO.selectedClassTestListSession(selected.getYear(),className1, selectedSection, conn);
				examList = DBO.selectedClassExamListSession(selected.getYear(),selectedSection, conn);
				clsName = className;

				for (ClassTest ct : classTestList) {
					testStatus = DBO.checkClassTestPerformanceStatusSession(selected.getYear(),ct.getId(), conn);
					if (testStatus == true) {
						DBO.entryOfNewStudentInClassTestPerformanceSession(schoolId,selected.getYear(),"CB" + String.valueOf(maxnumber), ct.getId(), conn);
					} else {

					}
				}
				for (ExamInfo ee : examList) {
					DBO.entryOfNewStudentInExamPerformanceSession(schoolId,selected.getYear(),"CB" + String.valueOf(maxnumber), ee.getClassid(),
							ee.getSubjectid(), ee.getSemesterid(), ee.getExamid(), ee.getExamType(), conn, ee.getMaxMark(), ee.getExamName());
				}


				//String id = selectedEnquiry.getId();
				//DBM.acceptEnquiry(id, selectedEnquiry.getEnquiryId(),userId, conn);
				//search();

				HttpSession ss = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
				ss.setAttribute("addNo", "CB" + String.valueOf(maxnumber));
				ss.setAttribute("name", selectedInfo.getSt_name());
				ss.setAttribute("selectedClass", selectedSection);

				updateAeTables();

			}
		} else {
			FacesContext fc = FacesContext.getCurrentInstance();
			fc.addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "If Student New Please Date Must Be In This Session",
							"If Student New Please Date Must Be In This Session "));
		}

		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}

	public void updateAeTables()
	{
		Connection conn = DataBaseConnection.javaConnection();
		String studentId = "CB"+cbNumber;
		String id = selected.getId();

		DBO.updateAdmStatus("Admission Accepted", "Admission Accepted", selected.getId(), conn);
		DBO.updateAdmRemark(remark, selected.getId(), conn);

		DBO.updateAEStudentId("online_adm", "student_id", studentId, "id", id, conn);
		DBO.updateAEStudentId("document_ae", "student_id", studentId, "enq_id", id, conn);
		DBO.updateAEStudentId("medical_ae", "student_id", studentId, "enq_id", id, conn);
		DBO.updateAEStudentId("sibling_ae", "student_id", studentId, "enq_id", id, conn);
		DBO.updateAEStudentId("vaccination_ae", "student_id", studentId, "enq_id", id, conn);

		// Update Student ID in AE Tables

		String unm = "all adm";
		list = DBO.myApplication(unm,"",conn);

		HttpSession ss=(HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		String regmail=(String) ss.getAttribute("registration");
		
		if(regmail.equals("true"))
		{
			LoginInfo ll= DBO.signUpInfo(selected.getLogin_id(), conn);
			String schnm = DBM.schoolNameById(schoolId, conn);
			String msg = "<center>"+remark+"<br></br>"+"<strong>Please Contact School Administration For Further Process.</strong><br></br>"+"Your Parent Portal Login Id : <strong>"+studentId+"</strong><br></br>"+"Password : <strong>"+studentId+"</strong><br></br>"+"<a href=\"http://chalkboxerp.in/DM/onlineAdmLogin.xhtml\"> <img style=\"height: 44px;\" src=\"http://chalkboxerp.in/loginNowButton.png\"> </a> <br></br></center>";
			String heading = "<center>Hello "+selected.getSt_name()+",</center>" + "<center class=\"red\">Congratulations, your admission form in  "+schnm+" has been accepted!</center>";
			String subject = schnm + " Admission Form Accepted!";

			Runnable r = new Runnable()
			{
				public void run()
				{

					new DataBaseOnlineAdm().doMail(ll.getEmail(), subject, heading, msg);
					if(selectedInfo.getReceipient().equalsIgnoreCase("Father"))
					{
						if(!ll.getEmail().equalsIgnoreCase(selectedInfo.getF_email()))
						{
							new DataBaseOnlineAdm().doMail(selectedInfo.getF_email(), subject, heading, msg);
						}

					}
					else if(selectedInfo.getReceipient().equalsIgnoreCase("Mother"))
					{
						if(!ll.getEmail().equalsIgnoreCase(selectedInfo.getM_email()))
						{
							new DataBaseOnlineAdm().doMail(selectedInfo.getM_email(), subject, heading, msg);
						}

					}
					else if(selectedInfo.getReceipient().equalsIgnoreCase("Both"))
					{
						if(!ll.getEmail().equalsIgnoreCase(selectedInfo.getF_email()))
						{
							new DataBaseOnlineAdm().doMail(selectedInfo.getF_email(), subject, heading, msg);
						}

						if(!ll.getEmail().equalsIgnoreCase(selectedInfo.getM_email()))
						{
							new DataBaseOnlineAdm().doMail(selectedInfo.getM_email(), subject, heading, msg);
						}
					}
				}

			};
			new Thread(r).start();
		}
		


		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public ArrayList<OnlineAdmInfo> getList() {
		return list;
	}

	public void setList(ArrayList<OnlineAdmInfo> list) {
		this.list = list;
	}

	public OnlineAdmInfo getSelected() {
		return selected;
	}

	public void setSelected(OnlineAdmInfo selected) {
		this.selected = selected;
	}

	public String getRemark() {
		return remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}

	public String getSrnoType() {
		return srnoType;
	}

	public void setSrnoType(String srnoType) {
		this.srnoType = srnoType;
	}

	public String getSrnoPrefix() {
		return srnoPrefix;
	}

	public void setSrnoPrefix(String srnoPrefix) {
		this.srnoPrefix = srnoPrefix;
	}

	public String getSrnoStart() {
		return srnoStart;
	}

	public void setSrnoStart(String srnoStart) {
		this.srnoStart = srnoStart;
	}

	public boolean isDisableSrNo() {
		return disableSrNo;
	}

	public void setDisableSrNo(boolean disableSrNo) {
		this.disableSrNo = disableSrNo;
	}

	public Date getAddmissionDate() {
		return addmissionDate;
	}

	public void setAddmissionDate(Date addmissionDate) {
		this.addmissionDate = addmissionDate;
	}

	public String getAddmissionNumber() {
		return addmissionNumber;
	}

	public void setAddmissionNumber(String addmissionNumber) {
		this.addmissionNumber = addmissionNumber;
	}

	public String getClassName1() {
		return className1;
	}

	public void setClassName1(String className1) {
		this.className1 = className1;
	}

	public String getSelectedSection() {
		return selectedSection;
	}

	public void setSelectedSection(String selectedSection) {
		this.selectedSection = selectedSection;
	}

	public ArrayList<SelectItem> getSectionList() {
		return sectionList;
	}

	public void setSectionList(ArrayList<SelectItem> sectionList) {
		this.sectionList = sectionList;
	}

	public ArrayList<SelectItem> getClassList() {
		return classList;
	}

	public void setClassList(ArrayList<SelectItem> classList) {
		this.classList = classList;
	}

	public OnlineAdmInfo getSelectedInfo() {
		return selectedInfo;
	}

	public void setSelectedInfo(OnlineAdmInfo selectedInfo) {
		this.selectedInfo = selectedInfo;
	}
}
